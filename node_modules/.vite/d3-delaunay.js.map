{
  "version": 3,
  "sources": ["../robust-predicates/esm/util.js", "../robust-predicates/esm/orient2d.js", "../robust-predicates/esm/orient3d.js", "../robust-predicates/esm/incircle.js", "../robust-predicates/esm/insphere.js", "../delaunator/index.js", "../d3-delaunay/src/path.js", "../d3-delaunay/src/polygon.js", "../d3-delaunay/src/voronoi.js", "../d3-delaunay/src/delaunay.js"],
  "sourcesContent": ["export const epsilon = 1.1102230246251565e-16;\r\nexport const splitter = 134217729;\r\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\r\n\r\n// fast_expansion_sum_zeroelim routine from oritinal code\r\nexport function sum(elen, e, flen, f, h) {\r\n    let Q, Qnew, hh, bvirt;\r\n    let enow = e[0];\r\n    let fnow = f[0];\r\n    let eindex = 0;\r\n    let findex = 0;\r\n    if ((fnow > enow) === (fnow > -enow)) {\r\n        Q = enow;\r\n        enow = e[++eindex];\r\n    } else {\r\n        Q = fnow;\r\n        fnow = f[++findex];\r\n    }\r\n    let hindex = 0;\r\n    if (eindex < elen && findex < flen) {\r\n        if ((fnow > enow) === (fnow > -enow)) {\r\n            Qnew = enow + Q;\r\n            hh = Q - (Qnew - enow);\r\n            enow = e[++eindex];\r\n        } else {\r\n            Qnew = fnow + Q;\r\n            hh = Q - (Qnew - fnow);\r\n            fnow = f[++findex];\r\n        }\r\n        Q = Qnew;\r\n        if (hh !== 0) {\r\n            h[hindex++] = hh;\r\n        }\r\n        while (eindex < elen && findex < flen) {\r\n            if ((fnow > enow) === (fnow > -enow)) {\r\n                Qnew = Q + enow;\r\n                bvirt = Qnew - Q;\r\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\r\n                enow = e[++eindex];\r\n            } else {\r\n                Qnew = Q + fnow;\r\n                bvirt = Qnew - Q;\r\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\r\n                fnow = f[++findex];\r\n            }\r\n            Q = Qnew;\r\n            if (hh !== 0) {\r\n                h[hindex++] = hh;\r\n            }\r\n        }\r\n    }\r\n    while (eindex < elen) {\r\n        Qnew = Q + enow;\r\n        bvirt = Qnew - Q;\r\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\r\n        enow = e[++eindex];\r\n        Q = Qnew;\r\n        if (hh !== 0) {\r\n            h[hindex++] = hh;\r\n        }\r\n    }\r\n    while (findex < flen) {\r\n        Qnew = Q + fnow;\r\n        bvirt = Qnew - Q;\r\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\r\n        fnow = f[++findex];\r\n        Q = Qnew;\r\n        if (hh !== 0) {\r\n            h[hindex++] = hh;\r\n        }\r\n    }\r\n    if (Q !== 0 || hindex === 0) {\r\n        h[hindex++] = Q;\r\n    }\r\n    return hindex;\r\n}\r\n\r\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\r\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\r\n}\r\n\r\n// scale_expansion_zeroelim routine from oritinal code\r\nexport function scale(elen, e, b, h) {\r\n    let Q, sum, hh, product1, product0;\r\n    let bvirt, c, ahi, alo, bhi, blo;\r\n\r\n    c = splitter * b;\r\n    bhi = c - (c - b);\r\n    blo = b - bhi;\r\n    let enow = e[0];\r\n    Q = enow * b;\r\n    c = splitter * enow;\r\n    ahi = c - (c - enow);\r\n    alo = enow - ahi;\r\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\r\n    let hindex = 0;\r\n    if (hh !== 0) {\r\n        h[hindex++] = hh;\r\n    }\r\n    for (let i = 1; i < elen; i++) {\r\n        enow = e[i];\r\n        product1 = enow * b;\r\n        c = splitter * enow;\r\n        ahi = c - (c - enow);\r\n        alo = enow - ahi;\r\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\r\n        sum = Q + product0;\r\n        bvirt = sum - Q;\r\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\r\n        if (hh !== 0) {\r\n            h[hindex++] = hh;\r\n        }\r\n        Q = product1 + sum;\r\n        hh = sum - (Q - product1);\r\n        if (hh !== 0) {\r\n            h[hindex++] = hh;\r\n        }\r\n    }\r\n    if (Q !== 0 || hindex === 0) {\r\n        h[hindex++] = Q;\r\n    }\r\n    return hindex;\r\n}\r\n\r\nexport function negate(elen, e) {\r\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\r\n    return elen;\r\n}\r\n\r\nexport function estimate(elen, e) {\r\n    let Q = e[0];\r\n    for (let i = 1; i < elen; i++) Q += e[i];\r\n    return Q;\r\n}\r\n\r\nexport function vec(n) {\r\n    return new Float64Array(n);\r\n}\r\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\r\n\r\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\r\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\r\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\r\n\r\nconst B = vec(4);\r\nconst C1 = vec(8);\r\nconst C2 = vec(12);\r\nconst D = vec(16);\r\nconst u = vec(4);\r\n\r\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\r\n    let acxtail, acytail, bcxtail, bcytail;\r\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\r\n\r\n    const acx = ax - cx;\r\n    const bcx = bx - cx;\r\n    const acy = ay - cy;\r\n    const bcy = by - cy;\r\n\r\n    s1 = acx * bcy;\r\n    c = splitter * acx;\r\n    ahi = c - (c - acx);\r\n    alo = acx - ahi;\r\n    c = splitter * bcy;\r\n    bhi = c - (c - bcy);\r\n    blo = bcy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = acy * bcx;\r\n    c = splitter * acy;\r\n    ahi = c - (c - acy);\r\n    alo = acy - ahi;\r\n    c = splitter * bcx;\r\n    bhi = c - (c - bcx);\r\n    blo = bcx - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    B[3] = u3;\r\n\r\n    let det = estimate(4, B);\r\n    let errbound = ccwerrboundB * detsum;\r\n    if (det >= errbound || -det >= errbound) {\r\n        return det;\r\n    }\r\n\r\n    bvirt = ax - acx;\r\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\r\n    bvirt = bx - bcx;\r\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\r\n    bvirt = ay - acy;\r\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\r\n    bvirt = by - bcy;\r\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\r\n\r\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\r\n        return det;\r\n    }\r\n\r\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\r\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\r\n    if (det >= errbound || -det >= errbound) return det;\r\n\r\n    s1 = acxtail * bcy;\r\n    c = splitter * acxtail;\r\n    ahi = c - (c - acxtail);\r\n    alo = acxtail - ahi;\r\n    c = splitter * bcy;\r\n    bhi = c - (c - bcy);\r\n    blo = bcy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = acytail * bcx;\r\n    c = splitter * acytail;\r\n    ahi = c - (c - acytail);\r\n    alo = acytail - ahi;\r\n    c = splitter * bcx;\r\n    bhi = c - (c - bcx);\r\n    blo = bcx - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    u[3] = u3;\r\n    const C1len = sum(4, B, 4, u, C1);\r\n\r\n    s1 = acx * bcytail;\r\n    c = splitter * acx;\r\n    ahi = c - (c - acx);\r\n    alo = acx - ahi;\r\n    c = splitter * bcytail;\r\n    bhi = c - (c - bcytail);\r\n    blo = bcytail - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = acy * bcxtail;\r\n    c = splitter * acy;\r\n    ahi = c - (c - acy);\r\n    alo = acy - ahi;\r\n    c = splitter * bcxtail;\r\n    bhi = c - (c - bcxtail);\r\n    blo = bcxtail - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    u[3] = u3;\r\n    const C2len = sum(C1len, C1, 4, u, C2);\r\n\r\n    s1 = acxtail * bcytail;\r\n    c = splitter * acxtail;\r\n    ahi = c - (c - acxtail);\r\n    alo = acxtail - ahi;\r\n    c = splitter * bcytail;\r\n    bhi = c - (c - bcytail);\r\n    blo = bcytail - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = acytail * bcxtail;\r\n    c = splitter * acytail;\r\n    ahi = c - (c - acytail);\r\n    alo = acytail - ahi;\r\n    c = splitter * bcxtail;\r\n    bhi = c - (c - bcxtail);\r\n    blo = bcxtail - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    u[3] = u3;\r\n    const Dlen = sum(C2len, C2, 4, u, D);\r\n\r\n    return D[Dlen - 1];\r\n}\r\n\r\nexport function orient2d(ax, ay, bx, by, cx, cy) {\r\n    const detleft = (ay - cy) * (bx - cx);\r\n    const detright = (ax - cx) * (by - cy);\r\n    const det = detleft - detright;\r\n\r\n    if (detleft === 0 || detright === 0 || (detleft > 0) !== (detright > 0)) return det;\r\n\r\n    const detsum = Math.abs(detleft + detright);\r\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\r\n\r\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\r\n}\r\n\r\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\r\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\r\n}\r\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum, scale} from './util.js';\r\n\r\nconst o3derrboundA = (7 + 56 * epsilon) * epsilon;\r\nconst o3derrboundB = (3 + 28 * epsilon) * epsilon;\r\nconst o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;\r\n\r\nconst bc = vec(4);\r\nconst ca = vec(4);\r\nconst ab = vec(4);\r\nconst at_b = vec(4);\r\nconst at_c = vec(4);\r\nconst bt_c = vec(4);\r\nconst bt_a = vec(4);\r\nconst ct_a = vec(4);\r\nconst ct_b = vec(4);\r\nconst bct = vec(8);\r\nconst cat = vec(8);\r\nconst abt = vec(8);\r\nconst u = vec(4);\r\n\r\nconst _8 = vec(8);\r\nconst _8b = vec(8);\r\nconst _16 = vec(8);\r\nconst _12 = vec(12);\r\n\r\nlet fin = vec(192);\r\nlet fin2 = vec(192);\r\n\r\nfunction finadd(finlen, alen, a) {\r\n    finlen = sum(finlen, fin, alen, a, fin2);\r\n    const tmp = fin; fin = fin2; fin2 = tmp;\r\n    return finlen;\r\n}\r\n\r\nfunction tailinit(xtail, ytail, ax, ay, bx, by, a, b) {\r\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;\r\n    if (xtail === 0) {\r\n        if (ytail === 0) {\r\n            a[0] = 0;\r\n            b[0] = 0;\r\n            return 1;\r\n        } else {\r\n            negate = -ytail;\r\n            s1 = negate * ax;\r\n            c = splitter * negate;\r\n            ahi = c - (c - negate);\r\n            alo = negate - ahi;\r\n            c = splitter * ax;\r\n            bhi = c - (c - ax);\r\n            blo = ax - bhi;\r\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            a[1] = s1;\r\n            s1 = ytail * bx;\r\n            c = splitter * ytail;\r\n            ahi = c - (c - ytail);\r\n            alo = ytail - ahi;\r\n            c = splitter * bx;\r\n            bhi = c - (c - bx);\r\n            blo = bx - bhi;\r\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            b[1] = s1;\r\n            return 2;\r\n        }\r\n    } else {\r\n        if (ytail === 0) {\r\n            s1 = xtail * ay;\r\n            c = splitter * xtail;\r\n            ahi = c - (c - xtail);\r\n            alo = xtail - ahi;\r\n            c = splitter * ay;\r\n            bhi = c - (c - ay);\r\n            blo = ay - bhi;\r\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            a[1] = s1;\r\n            negate = -xtail;\r\n            s1 = negate * by;\r\n            c = splitter * negate;\r\n            ahi = c - (c - negate);\r\n            alo = negate - ahi;\r\n            c = splitter * by;\r\n            bhi = c - (c - by);\r\n            blo = by - bhi;\r\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            b[1] = s1;\r\n            return 2;\r\n        } else {\r\n            s1 = xtail * ay;\r\n            c = splitter * xtail;\r\n            ahi = c - (c - xtail);\r\n            alo = xtail - ahi;\r\n            c = splitter * ay;\r\n            bhi = c - (c - ay);\r\n            blo = ay - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = ytail * ax;\r\n            c = splitter * ytail;\r\n            ahi = c - (c - ytail);\r\n            alo = ytail - ahi;\r\n            c = splitter * ax;\r\n            bhi = c - (c - ax);\r\n            blo = ax - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 - t0;\r\n            bvirt = s0 - _i;\r\n            a[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 - t1;\r\n            bvirt = _0 - _i;\r\n            a[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            a[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            a[3] = u3;\r\n            s1 = ytail * bx;\r\n            c = splitter * ytail;\r\n            ahi = c - (c - ytail);\r\n            alo = ytail - ahi;\r\n            c = splitter * bx;\r\n            bhi = c - (c - bx);\r\n            blo = bx - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = xtail * by;\r\n            c = splitter * xtail;\r\n            ahi = c - (c - xtail);\r\n            alo = xtail - ahi;\r\n            c = splitter * by;\r\n            bhi = c - (c - by);\r\n            blo = by - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 - t0;\r\n            bvirt = s0 - _i;\r\n            b[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 - t1;\r\n            bvirt = _0 - _i;\r\n            b[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            b[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            b[3] = u3;\r\n            return 4;\r\n        }\r\n    }\r\n}\r\n\r\nfunction tailadd(finlen, a, b, k, z) {\r\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;\r\n    s1 = a * b;\r\n    c = splitter * a;\r\n    ahi = c - (c - a);\r\n    alo = a - ahi;\r\n    c = splitter * b;\r\n    bhi = c - (c - b);\r\n    blo = b - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    c = splitter * k;\r\n    bhi = c - (c - k);\r\n    blo = k - bhi;\r\n    _i = s0 * k;\r\n    c = splitter * s0;\r\n    ahi = c - (c - s0);\r\n    alo = s0 - ahi;\r\n    u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\r\n    _j = s1 * k;\r\n    c = splitter * s1;\r\n    ahi = c - (c - s1);\r\n    alo = s1 - ahi;\r\n    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\r\n    _k = _i + _0;\r\n    bvirt = _k - _i;\r\n    u[1] = _i - (_k - bvirt) + (_0 - bvirt);\r\n    u3 = _j + _k;\r\n    u[2] = _k - (u3 - _j);\r\n    u[3] = u3;\r\n    finlen = finadd(finlen, 4, u);\r\n    if (z !== 0) {\r\n        c = splitter * z;\r\n        bhi = c - (c - z);\r\n        blo = z - bhi;\r\n        _i = s0 * z;\r\n        c = splitter * s0;\r\n        ahi = c - (c - s0);\r\n        alo = s0 - ahi;\r\n        u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\r\n        _j = s1 * z;\r\n        c = splitter * s1;\r\n        ahi = c - (c - s1);\r\n        alo = s1 - ahi;\r\n        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\r\n        _k = _i + _0;\r\n        bvirt = _k - _i;\r\n        u[1] = _i - (_k - bvirt) + (_0 - bvirt);\r\n        u3 = _j + _k;\r\n        u[2] = _k - (u3 - _j);\r\n        u[3] = u3;\r\n        finlen = finadd(finlen, 4, u);\r\n    }\r\n    return finlen;\r\n}\r\n\r\nfunction orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {\r\n    let finlen;\r\n    let adxtail, bdxtail, cdxtail;\r\n    let adytail, bdytail, cdytail;\r\n    let adztail, bdztail, cdztail;\r\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;\r\n\r\n    const adx = ax - dx;\r\n    const bdx = bx - dx;\r\n    const cdx = cx - dx;\r\n    const ady = ay - dy;\r\n    const bdy = by - dy;\r\n    const cdy = cy - dy;\r\n    const adz = az - dz;\r\n    const bdz = bz - dz;\r\n    const cdz = cz - dz;\r\n\r\n    s1 = bdx * cdy;\r\n    c = splitter * bdx;\r\n    ahi = c - (c - bdx);\r\n    alo = bdx - ahi;\r\n    c = splitter * cdy;\r\n    bhi = c - (c - cdy);\r\n    blo = cdy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = cdx * bdy;\r\n    c = splitter * cdx;\r\n    ahi = c - (c - cdx);\r\n    alo = cdx - ahi;\r\n    c = splitter * bdy;\r\n    bhi = c - (c - bdy);\r\n    blo = bdy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    bc[3] = u3;\r\n    s1 = cdx * ady;\r\n    c = splitter * cdx;\r\n    ahi = c - (c - cdx);\r\n    alo = cdx - ahi;\r\n    c = splitter * ady;\r\n    bhi = c - (c - ady);\r\n    blo = ady - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = adx * cdy;\r\n    c = splitter * adx;\r\n    ahi = c - (c - adx);\r\n    alo = adx - ahi;\r\n    c = splitter * cdy;\r\n    bhi = c - (c - cdy);\r\n    blo = cdy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ca[3] = u3;\r\n    s1 = adx * bdy;\r\n    c = splitter * adx;\r\n    ahi = c - (c - adx);\r\n    alo = adx - ahi;\r\n    c = splitter * bdy;\r\n    bhi = c - (c - bdy);\r\n    blo = bdy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = bdx * ady;\r\n    c = splitter * bdx;\r\n    ahi = c - (c - bdx);\r\n    alo = bdx - ahi;\r\n    c = splitter * ady;\r\n    bhi = c - (c - ady);\r\n    blo = ady - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ab[3] = u3;\r\n\r\n    finlen = sum(\r\n        sum(\r\n            scale(4, bc, adz, _8), _8,\r\n            scale(4, ca, bdz, _8b), _8b, _16), _16,\r\n        scale(4, ab, cdz, _8), _8, fin);\r\n\r\n    let det = estimate(finlen, fin);\r\n    let errbound = o3derrboundB * permanent;\r\n    if (det >= errbound || -det >= errbound) {\r\n        return det;\r\n    }\r\n\r\n    bvirt = ax - adx;\r\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\r\n    bvirt = bx - bdx;\r\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\r\n    bvirt = cx - cdx;\r\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\r\n    bvirt = ay - ady;\r\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\r\n    bvirt = by - bdy;\r\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\r\n    bvirt = cy - cdy;\r\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\r\n    bvirt = az - adz;\r\n    adztail = az - (adz + bvirt) + (bvirt - dz);\r\n    bvirt = bz - bdz;\r\n    bdztail = bz - (bdz + bvirt) + (bvirt - dz);\r\n    bvirt = cz - cdz;\r\n    cdztail = cz - (cdz + bvirt) + (bvirt - dz);\r\n\r\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 &&\r\n        adytail === 0 && bdytail === 0 && cdytail === 0 &&\r\n        adztail === 0 && bdztail === 0 && cdztail === 0) {\r\n        return det;\r\n    }\r\n\r\n    errbound = o3derrboundC * permanent + resulterrbound * Math.abs(det);\r\n    det +=\r\n        adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) +\r\n        bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) +\r\n        cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);\r\n    if (det >= errbound || -det >= errbound) {\r\n        return det;\r\n    }\r\n\r\n    const at_len = tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, at_b, at_c);\r\n    const bt_len = tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, bt_c, bt_a);\r\n    const ct_len = tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, ct_a, ct_b);\r\n\r\n    const bctlen = sum(bt_len, bt_c, ct_len, ct_b, bct);\r\n    finlen = finadd(finlen, scale(bctlen, bct, adz, _16), _16);\r\n\r\n    const catlen = sum(ct_len, ct_a, at_len, at_c, cat);\r\n    finlen = finadd(finlen, scale(catlen, cat, bdz, _16), _16);\r\n\r\n    const abtlen = sum(at_len, at_b, bt_len, bt_a, abt);\r\n    finlen = finadd(finlen, scale(abtlen, abt, cdz, _16), _16);\r\n\r\n    if (adztail !== 0) {\r\n        finlen = finadd(finlen, scale(4, bc, adztail, _12), _12);\r\n        finlen = finadd(finlen, scale(bctlen, bct, adztail, _16), _16);\r\n    }\r\n    if (bdztail !== 0) {\r\n        finlen = finadd(finlen, scale(4, ca, bdztail, _12), _12);\r\n        finlen = finadd(finlen, scale(catlen, cat, bdztail, _16), _16);\r\n    }\r\n    if (cdztail !== 0) {\r\n        finlen = finadd(finlen, scale(4, ab, cdztail, _12), _12);\r\n        finlen = finadd(finlen, scale(abtlen, abt, cdztail, _16), _16);\r\n    }\r\n\r\n    if (adxtail !== 0) {\r\n        if (bdytail !== 0) {\r\n            finlen = tailadd(finlen, adxtail, bdytail, cdz, cdztail);\r\n        }\r\n        if (cdytail !== 0) {\r\n            finlen = tailadd(finlen, -adxtail, cdytail, bdz, bdztail);\r\n        }\r\n    }\r\n    if (bdxtail !== 0) {\r\n        if (cdytail !== 0) {\r\n            finlen = tailadd(finlen, bdxtail, cdytail, adz, adztail);\r\n        }\r\n        if (adytail !== 0) {\r\n            finlen = tailadd(finlen, -bdxtail, adytail, cdz, cdztail);\r\n        }\r\n    }\r\n    if (cdxtail !== 0) {\r\n        if (adytail !== 0) {\r\n            finlen = tailadd(finlen, cdxtail, adytail, bdz, bdztail);\r\n        }\r\n        if (bdytail !== 0) {\r\n            finlen = tailadd(finlen, -cdxtail, bdytail, adz, adztail);\r\n        }\r\n    }\r\n\r\n    return fin[finlen - 1];\r\n}\r\n\r\nexport function orient3d(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\r\n    const adx = ax - dx;\r\n    const bdx = bx - dx;\r\n    const cdx = cx - dx;\r\n    const ady = ay - dy;\r\n    const bdy = by - dy;\r\n    const cdy = cy - dy;\r\n    const adz = az - dz;\r\n    const bdz = bz - dz;\r\n    const cdz = cz - dz;\r\n\r\n    const bdxcdy = bdx * cdy;\r\n    const cdxbdy = cdx * bdy;\r\n\r\n    const cdxady = cdx * ady;\r\n    const adxcdy = adx * cdy;\r\n\r\n    const adxbdy = adx * bdy;\r\n    const bdxady = bdx * ady;\r\n\r\n    const det =\r\n        adz * (bdxcdy - cdxbdy) +\r\n        bdz * (cdxady - adxcdy) +\r\n        cdz * (adxbdy - bdxady);\r\n\r\n    const permanent =\r\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) +\r\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) +\r\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);\r\n\r\n    const errbound = o3derrboundA * permanent;\r\n    if (det > errbound || -det > errbound) {\r\n        return det;\r\n    }\r\n\r\n    return orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);\r\n}\r\n\r\nexport function orient3dfast(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\r\n    const adx = ax - dx;\r\n    const bdx = bx - dx;\r\n    const cdx = cx - dx;\r\n    const ady = ay - dy;\r\n    const bdy = by - dy;\r\n    const cdy = cy - dy;\r\n    const adz = az - dz;\r\n    const bdz = bz - dz;\r\n    const cdz = cz - dz;\r\n\r\n    return adx * (bdy * cdz - bdz * cdy) +\r\n        bdx * (cdy * adz - cdz * ady) +\r\n        cdx * (ady * bdz - adz * bdy);\r\n}\r\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale} from './util.js';\r\n\r\nconst iccerrboundA = (10 + 96 * epsilon) * epsilon;\r\nconst iccerrboundB = (4 + 48 * epsilon) * epsilon;\r\nconst iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;\r\n\r\nconst bc = vec(4);\r\nconst ca = vec(4);\r\nconst ab = vec(4);\r\nconst aa = vec(4);\r\nconst bb = vec(4);\r\nconst cc = vec(4);\r\nconst u = vec(4);\r\nconst v = vec(4);\r\nconst axtbc = vec(8);\r\nconst aytbc = vec(8);\r\nconst bxtca = vec(8);\r\nconst bytca = vec(8);\r\nconst cxtab = vec(8);\r\nconst cytab = vec(8);\r\nconst abt = vec(8);\r\nconst bct = vec(8);\r\nconst cat = vec(8);\r\nconst abtt = vec(4);\r\nconst bctt = vec(4);\r\nconst catt = vec(4);\r\n\r\nconst _8 = vec(8);\r\nconst _16 = vec(16);\r\nconst _16b = vec(16);\r\nconst _16c = vec(16);\r\nconst _32 = vec(32);\r\nconst _32b = vec(32);\r\nconst _48 = vec(48);\r\nconst _64 = vec(64);\r\n\r\nlet fin = vec(1152);\r\nlet fin2 = vec(1152);\r\n\r\nfunction finadd(finlen, a, alen) {\r\n    finlen = sum(finlen, fin, a, alen, fin2);\r\n    const tmp = fin; fin = fin2; fin2 = tmp;\r\n    return finlen;\r\n}\r\n\r\nfunction incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {\r\n    let finlen;\r\n    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;\r\n    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;\r\n    let abtlen, bctlen, catlen;\r\n    let abttlen, bcttlen, cattlen;\r\n    let n1, n0;\r\n\r\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\r\n\r\n    const adx = ax - dx;\r\n    const bdx = bx - dx;\r\n    const cdx = cx - dx;\r\n    const ady = ay - dy;\r\n    const bdy = by - dy;\r\n    const cdy = cy - dy;\r\n\r\n    s1 = bdx * cdy;\r\n    c = splitter * bdx;\r\n    ahi = c - (c - bdx);\r\n    alo = bdx - ahi;\r\n    c = splitter * cdy;\r\n    bhi = c - (c - cdy);\r\n    blo = cdy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = cdx * bdy;\r\n    c = splitter * cdx;\r\n    ahi = c - (c - cdx);\r\n    alo = cdx - ahi;\r\n    c = splitter * bdy;\r\n    bhi = c - (c - bdy);\r\n    blo = bdy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    bc[3] = u3;\r\n    s1 = cdx * ady;\r\n    c = splitter * cdx;\r\n    ahi = c - (c - cdx);\r\n    alo = cdx - ahi;\r\n    c = splitter * ady;\r\n    bhi = c - (c - ady);\r\n    blo = ady - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = adx * cdy;\r\n    c = splitter * adx;\r\n    ahi = c - (c - adx);\r\n    alo = adx - ahi;\r\n    c = splitter * cdy;\r\n    bhi = c - (c - cdy);\r\n    blo = cdy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ca[3] = u3;\r\n    s1 = adx * bdy;\r\n    c = splitter * adx;\r\n    ahi = c - (c - adx);\r\n    alo = adx - ahi;\r\n    c = splitter * bdy;\r\n    bhi = c - (c - bdy);\r\n    blo = bdy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = bdx * ady;\r\n    c = splitter * bdx;\r\n    ahi = c - (c - bdx);\r\n    alo = bdx - ahi;\r\n    c = splitter * ady;\r\n    bhi = c - (c - ady);\r\n    blo = ady - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ab[3] = u3;\r\n\r\n    finlen = sum(\r\n        sum(\r\n            sum(\r\n                scale(scale(4, bc, adx, _8), _8, adx, _16), _16,\r\n                scale(scale(4, bc, ady, _8), _8, ady, _16b), _16b, _32), _32,\r\n            sum(\r\n                scale(scale(4, ca, bdx, _8), _8, bdx, _16), _16,\r\n                scale(scale(4, ca, bdy, _8), _8, bdy, _16b), _16b, _32b), _32b, _64), _64,\r\n        sum(\r\n            scale(scale(4, ab, cdx, _8), _8, cdx, _16), _16,\r\n            scale(scale(4, ab, cdy, _8), _8, cdy, _16b), _16b, _32), _32, fin);\r\n\r\n    let det = estimate(finlen, fin);\r\n    let errbound = iccerrboundB * permanent;\r\n    if (det >= errbound || -det >= errbound) {\r\n        return det;\r\n    }\r\n\r\n    bvirt = ax - adx;\r\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\r\n    bvirt = ay - ady;\r\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\r\n    bvirt = bx - bdx;\r\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\r\n    bvirt = by - bdy;\r\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\r\n    bvirt = cx - cdx;\r\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\r\n    bvirt = cy - cdy;\r\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\r\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) {\r\n        return det;\r\n    }\r\n\r\n    errbound = iccerrboundC * permanent + resulterrbound * Math.abs(det);\r\n    det += ((adx * adx + ady * ady) * ((bdx * cdytail + cdy * bdxtail) - (bdy * cdxtail + cdx * bdytail)) +\r\n        2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx)) +\r\n        ((bdx * bdx + bdy * bdy) * ((cdx * adytail + ady * cdxtail) - (cdy * adxtail + adx * cdytail)) +\r\n        2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) +\r\n        ((cdx * cdx + cdy * cdy) * ((adx * bdytail + bdy * adxtail) - (ady * bdxtail + bdx * adytail)) +\r\n        2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));\r\n\r\n    if (det >= errbound || -det >= errbound) {\r\n        return det;\r\n    }\r\n\r\n    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\r\n        s1 = adx * adx;\r\n        c = splitter * adx;\r\n        ahi = c - (c - adx);\r\n        alo = adx - ahi;\r\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\r\n        t1 = ady * ady;\r\n        c = splitter * ady;\r\n        ahi = c - (c - ady);\r\n        alo = ady - ahi;\r\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\r\n        _i = s0 + t0;\r\n        bvirt = _i - s0;\r\n        aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n        _j = s1 + _i;\r\n        bvirt = _j - s1;\r\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n        _i = _0 + t1;\r\n        bvirt = _i - _0;\r\n        aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n        u3 = _j + _i;\r\n        bvirt = u3 - _j;\r\n        aa[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n        aa[3] = u3;\r\n    }\r\n    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\r\n        s1 = bdx * bdx;\r\n        c = splitter * bdx;\r\n        ahi = c - (c - bdx);\r\n        alo = bdx - ahi;\r\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\r\n        t1 = bdy * bdy;\r\n        c = splitter * bdy;\r\n        ahi = c - (c - bdy);\r\n        alo = bdy - ahi;\r\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\r\n        _i = s0 + t0;\r\n        bvirt = _i - s0;\r\n        bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n        _j = s1 + _i;\r\n        bvirt = _j - s1;\r\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n        _i = _0 + t1;\r\n        bvirt = _i - _0;\r\n        bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n        u3 = _j + _i;\r\n        bvirt = u3 - _j;\r\n        bb[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n        bb[3] = u3;\r\n    }\r\n    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\r\n        s1 = cdx * cdx;\r\n        c = splitter * cdx;\r\n        ahi = c - (c - cdx);\r\n        alo = cdx - ahi;\r\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\r\n        t1 = cdy * cdy;\r\n        c = splitter * cdy;\r\n        ahi = c - (c - cdy);\r\n        alo = cdy - ahi;\r\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\r\n        _i = s0 + t0;\r\n        bvirt = _i - s0;\r\n        cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n        _j = s1 + _i;\r\n        bvirt = _j - s1;\r\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n        _i = _0 + t1;\r\n        bvirt = _i - _0;\r\n        cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n        u3 = _j + _i;\r\n        bvirt = u3 - _j;\r\n        cc[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n        cc[3] = u3;\r\n    }\r\n\r\n    if (adxtail !== 0) {\r\n        axtbclen = scale(4, bc, adxtail, axtbc);\r\n        finlen = finadd(finlen, sum_three(\r\n            scale(axtbclen, axtbc, 2 * adx, _16), _16,\r\n            scale(scale(4, cc, adxtail, _8), _8, bdy, _16b), _16b,\r\n            scale(scale(4, bb, adxtail, _8), _8, -cdy, _16c), _16c, _32, _48), _48);\r\n    }\r\n    if (adytail !== 0) {\r\n        aytbclen = scale(4, bc, adytail, aytbc);\r\n        finlen = finadd(finlen, sum_three(\r\n            scale(aytbclen, aytbc, 2 * ady, _16), _16,\r\n            scale(scale(4, bb, adytail, _8), _8, cdx, _16b), _16b,\r\n            scale(scale(4, cc, adytail, _8), _8, -bdx, _16c), _16c, _32, _48), _48);\r\n    }\r\n    if (bdxtail !== 0) {\r\n        bxtcalen = scale(4, ca, bdxtail, bxtca);\r\n        finlen = finadd(finlen, sum_three(\r\n            scale(bxtcalen, bxtca, 2 * bdx, _16), _16,\r\n            scale(scale(4, aa, bdxtail, _8), _8, cdy, _16b), _16b,\r\n            scale(scale(4, cc, bdxtail, _8), _8, -ady, _16c), _16c, _32, _48), _48);\r\n    }\r\n    if (bdytail !== 0) {\r\n        bytcalen = scale(4, ca, bdytail, bytca);\r\n        finlen = finadd(finlen, sum_three(\r\n            scale(bytcalen, bytca, 2 * bdy, _16), _16,\r\n            scale(scale(4, cc, bdytail, _8), _8, adx, _16b), _16b,\r\n            scale(scale(4, aa, bdytail, _8), _8, -cdx, _16c), _16c, _32, _48), _48);\r\n    }\r\n    if (cdxtail !== 0) {\r\n        cxtablen = scale(4, ab, cdxtail, cxtab);\r\n        finlen = finadd(finlen, sum_three(\r\n            scale(cxtablen, cxtab, 2 * cdx, _16), _16,\r\n            scale(scale(4, bb, cdxtail, _8), _8, ady, _16b), _16b,\r\n            scale(scale(4, aa, cdxtail, _8), _8, -bdy, _16c), _16c, _32, _48), _48);\r\n    }\r\n    if (cdytail !== 0) {\r\n        cytablen = scale(4, ab, cdytail, cytab);\r\n        finlen = finadd(finlen, sum_three(\r\n            scale(cytablen, cytab, 2 * cdy, _16), _16,\r\n            scale(scale(4, aa, cdytail, _8), _8, bdx, _16b), _16b,\r\n            scale(scale(4, bb, cdytail, _8), _8, -adx, _16c), _16c, _32, _48), _48);\r\n    }\r\n\r\n    if (adxtail !== 0 || adytail !== 0) {\r\n        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\r\n            s1 = bdxtail * cdy;\r\n            c = splitter * bdxtail;\r\n            ahi = c - (c - bdxtail);\r\n            alo = bdxtail - ahi;\r\n            c = splitter * cdy;\r\n            bhi = c - (c - cdy);\r\n            blo = cdy - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = bdx * cdytail;\r\n            c = splitter * bdx;\r\n            ahi = c - (c - bdx);\r\n            alo = bdx - ahi;\r\n            c = splitter * cdytail;\r\n            bhi = c - (c - cdytail);\r\n            blo = cdytail - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 + t0;\r\n            bvirt = _i - s0;\r\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 + t1;\r\n            bvirt = _i - _0;\r\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            u[3] = u3;\r\n            s1 = cdxtail * -bdy;\r\n            c = splitter * cdxtail;\r\n            ahi = c - (c - cdxtail);\r\n            alo = cdxtail - ahi;\r\n            c = splitter * -bdy;\r\n            bhi = c - (c - -bdy);\r\n            blo = -bdy - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = cdx * -bdytail;\r\n            c = splitter * cdx;\r\n            ahi = c - (c - cdx);\r\n            alo = cdx - ahi;\r\n            c = splitter * -bdytail;\r\n            bhi = c - (c - -bdytail);\r\n            blo = -bdytail - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 + t0;\r\n            bvirt = _i - s0;\r\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 + t1;\r\n            bvirt = _i - _0;\r\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            v[3] = u3;\r\n            bctlen = sum(4, u, 4, v, bct);\r\n            s1 = bdxtail * cdytail;\r\n            c = splitter * bdxtail;\r\n            ahi = c - (c - bdxtail);\r\n            alo = bdxtail - ahi;\r\n            c = splitter * cdytail;\r\n            bhi = c - (c - cdytail);\r\n            blo = cdytail - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = cdxtail * bdytail;\r\n            c = splitter * cdxtail;\r\n            ahi = c - (c - cdxtail);\r\n            alo = cdxtail - ahi;\r\n            c = splitter * bdytail;\r\n            bhi = c - (c - bdytail);\r\n            blo = bdytail - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 - t0;\r\n            bvirt = s0 - _i;\r\n            bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 - t1;\r\n            bvirt = _0 - _i;\r\n            bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            bctt[3] = u3;\r\n            bcttlen = 4;\r\n        } else {\r\n            bct[0] = 0;\r\n            bctlen = 1;\r\n            bctt[0] = 0;\r\n            bcttlen = 1;\r\n        }\r\n        if (adxtail !== 0) {\r\n            const len = scale(bctlen, bct, adxtail, _16c);\r\n            finlen = finadd(finlen, sum(\r\n                scale(axtbclen, axtbc, adxtail, _16), _16,\r\n                scale(len, _16c, 2 * adx, _32), _32, _48), _48);\r\n\r\n            const len2 = scale(bcttlen, bctt, adxtail, _8);\r\n            finlen = finadd(finlen, sum_three(\r\n                scale(len2, _8, 2 * adx, _16), _16,\r\n                scale(len2, _8, adxtail, _16b), _16b,\r\n                scale(len, _16c, adxtail, _32), _32, _32b, _64), _64);\r\n\r\n            if (bdytail !== 0) {\r\n                finlen = finadd(finlen, scale(scale(4, cc, adxtail, _8), _8, bdytail, _16), _16);\r\n            }\r\n            if (cdytail !== 0) {\r\n                finlen = finadd(finlen, scale(scale(4, bb, -adxtail, _8), _8, cdytail, _16), _16);\r\n            }\r\n        }\r\n        if (adytail !== 0) {\r\n            const len = scale(bctlen, bct, adytail, _16c);\r\n            finlen = finadd(finlen, sum(\r\n                scale(aytbclen, aytbc, adytail, _16), _16,\r\n                scale(len, _16c, 2 * ady, _32), _32, _48), _48);\r\n\r\n            const len2 = scale(bcttlen, bctt, adytail, _8);\r\n            finlen = finadd(finlen, sum_three(\r\n                scale(len2, _8, 2 * ady, _16), _16,\r\n                scale(len2, _8, adytail, _16b), _16b,\r\n                scale(len, _16c, adytail, _32), _32, _32b, _64), _64);\r\n        }\r\n    }\r\n    if (bdxtail !== 0 || bdytail !== 0) {\r\n        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\r\n            s1 = cdxtail * ady;\r\n            c = splitter * cdxtail;\r\n            ahi = c - (c - cdxtail);\r\n            alo = cdxtail - ahi;\r\n            c = splitter * ady;\r\n            bhi = c - (c - ady);\r\n            blo = ady - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = cdx * adytail;\r\n            c = splitter * cdx;\r\n            ahi = c - (c - cdx);\r\n            alo = cdx - ahi;\r\n            c = splitter * adytail;\r\n            bhi = c - (c - adytail);\r\n            blo = adytail - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 + t0;\r\n            bvirt = _i - s0;\r\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 + t1;\r\n            bvirt = _i - _0;\r\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            u[3] = u3;\r\n            n1 = -cdy;\r\n            n0 = -cdytail;\r\n            s1 = adxtail * n1;\r\n            c = splitter * adxtail;\r\n            ahi = c - (c - adxtail);\r\n            alo = adxtail - ahi;\r\n            c = splitter * n1;\r\n            bhi = c - (c - n1);\r\n            blo = n1 - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = adx * n0;\r\n            c = splitter * adx;\r\n            ahi = c - (c - adx);\r\n            alo = adx - ahi;\r\n            c = splitter * n0;\r\n            bhi = c - (c - n0);\r\n            blo = n0 - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 + t0;\r\n            bvirt = _i - s0;\r\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 + t1;\r\n            bvirt = _i - _0;\r\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            v[3] = u3;\r\n            catlen = sum(4, u, 4, v, cat);\r\n            s1 = cdxtail * adytail;\r\n            c = splitter * cdxtail;\r\n            ahi = c - (c - cdxtail);\r\n            alo = cdxtail - ahi;\r\n            c = splitter * adytail;\r\n            bhi = c - (c - adytail);\r\n            blo = adytail - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = adxtail * cdytail;\r\n            c = splitter * adxtail;\r\n            ahi = c - (c - adxtail);\r\n            alo = adxtail - ahi;\r\n            c = splitter * cdytail;\r\n            bhi = c - (c - cdytail);\r\n            blo = cdytail - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 - t0;\r\n            bvirt = s0 - _i;\r\n            catt[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 - t1;\r\n            bvirt = _0 - _i;\r\n            catt[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            catt[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            catt[3] = u3;\r\n            cattlen = 4;\r\n        } else {\r\n            cat[0] = 0;\r\n            catlen = 1;\r\n            catt[0] = 0;\r\n            cattlen = 1;\r\n        }\r\n        if (bdxtail !== 0) {\r\n            const len = scale(catlen, cat, bdxtail, _16c);\r\n            finlen = finadd(finlen, sum(\r\n                scale(bxtcalen, bxtca, bdxtail, _16), _16,\r\n                scale(len, _16c, 2 * bdx, _32), _32, _48), _48);\r\n\r\n            const len2 = scale(cattlen, catt, bdxtail, _8);\r\n            finlen = finadd(finlen, sum_three(\r\n                scale(len2, _8, 2 * bdx, _16), _16,\r\n                scale(len2, _8, bdxtail, _16b), _16b,\r\n                scale(len, _16c, bdxtail, _32), _32, _32b, _64), _64);\r\n\r\n            if (cdytail !== 0) {\r\n                finlen = finadd(finlen, scale(scale(4, aa, bdxtail, _8), _8, cdytail, _16), _16);\r\n            }\r\n            if (adytail !== 0) {\r\n                finlen = finadd(finlen, scale(scale(4, cc, -bdxtail, _8), _8, adytail, _16), _16);\r\n            }\r\n        }\r\n        if (bdytail !== 0) {\r\n            const len = scale(catlen, cat, bdytail, _16c);\r\n            finlen = finadd(finlen, sum(\r\n                scale(bytcalen, bytca, bdytail, _16), _16,\r\n                scale(len, _16c, 2 * bdy, _32), _32, _48), _48);\r\n\r\n            const len2 = scale(cattlen, catt, bdytail, _8);\r\n            finlen = finadd(finlen, sum_three(\r\n                scale(len2, _8, 2 * bdy, _16), _16,\r\n                scale(len2, _8, bdytail, _16b), _16b,\r\n                scale(len, _16c, bdytail, _32), _32,  _32b, _64), _64);\r\n        }\r\n    }\r\n    if (cdxtail !== 0 || cdytail !== 0) {\r\n        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\r\n            s1 = adxtail * bdy;\r\n            c = splitter * adxtail;\r\n            ahi = c - (c - adxtail);\r\n            alo = adxtail - ahi;\r\n            c = splitter * bdy;\r\n            bhi = c - (c - bdy);\r\n            blo = bdy - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = adx * bdytail;\r\n            c = splitter * adx;\r\n            ahi = c - (c - adx);\r\n            alo = adx - ahi;\r\n            c = splitter * bdytail;\r\n            bhi = c - (c - bdytail);\r\n            blo = bdytail - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 + t0;\r\n            bvirt = _i - s0;\r\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 + t1;\r\n            bvirt = _i - _0;\r\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            u[3] = u3;\r\n            n1 = -ady;\r\n            n0 = -adytail;\r\n            s1 = bdxtail * n1;\r\n            c = splitter * bdxtail;\r\n            ahi = c - (c - bdxtail);\r\n            alo = bdxtail - ahi;\r\n            c = splitter * n1;\r\n            bhi = c - (c - n1);\r\n            blo = n1 - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = bdx * n0;\r\n            c = splitter * bdx;\r\n            ahi = c - (c - bdx);\r\n            alo = bdx - ahi;\r\n            c = splitter * n0;\r\n            bhi = c - (c - n0);\r\n            blo = n0 - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 + t0;\r\n            bvirt = _i - s0;\r\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 + t1;\r\n            bvirt = _i - _0;\r\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            v[3] = u3;\r\n            abtlen = sum(4, u, 4, v, abt);\r\n            s1 = adxtail * bdytail;\r\n            c = splitter * adxtail;\r\n            ahi = c - (c - adxtail);\r\n            alo = adxtail - ahi;\r\n            c = splitter * bdytail;\r\n            bhi = c - (c - bdytail);\r\n            blo = bdytail - bhi;\r\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            t1 = bdxtail * adytail;\r\n            c = splitter * bdxtail;\r\n            ahi = c - (c - bdxtail);\r\n            alo = bdxtail - ahi;\r\n            c = splitter * adytail;\r\n            bhi = c - (c - adytail);\r\n            blo = adytail - bhi;\r\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n            _i = s0 - t0;\r\n            bvirt = s0 - _i;\r\n            abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n            _j = s1 + _i;\r\n            bvirt = _j - s1;\r\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n            _i = _0 - t1;\r\n            bvirt = _0 - _i;\r\n            abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n            u3 = _j + _i;\r\n            bvirt = u3 - _j;\r\n            abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n            abtt[3] = u3;\r\n            abttlen = 4;\r\n        } else {\r\n            abt[0] = 0;\r\n            abtlen = 1;\r\n            abtt[0] = 0;\r\n            abttlen = 1;\r\n        }\r\n        if (cdxtail !== 0) {\r\n            const len = scale(abtlen, abt, cdxtail, _16c);\r\n            finlen = finadd(finlen, sum(\r\n                scale(cxtablen, cxtab, cdxtail, _16), _16,\r\n                scale(len, _16c, 2 * cdx, _32), _32, _48), _48);\r\n\r\n            const len2 = scale(abttlen, abtt, cdxtail, _8);\r\n            finlen = finadd(finlen, sum_three(\r\n                scale(len2, _8, 2 * cdx, _16), _16,\r\n                scale(len2, _8, cdxtail, _16b), _16b,\r\n                scale(len, _16c, cdxtail, _32), _32, _32b, _64), _64);\r\n\r\n            if (adytail !== 0) {\r\n                finlen = finadd(finlen, scale(scale(4, bb, cdxtail, _8), _8, adytail, _16), _16);\r\n            }\r\n            if (bdytail !== 0) {\r\n                finlen = finadd(finlen, scale(scale(4, aa, -cdxtail, _8), _8, bdytail, _16), _16);\r\n            }\r\n        }\r\n        if (cdytail !== 0) {\r\n            const len = scale(abtlen, abt, cdytail, _16c);\r\n            finlen = finadd(finlen, sum(\r\n                scale(cytablen, cytab, cdytail, _16), _16,\r\n                scale(len, _16c, 2 * cdy, _32), _32, _48), _48);\r\n\r\n            const len2 = scale(abttlen, abtt, cdytail, _8);\r\n            finlen = finadd(finlen, sum_three(\r\n                scale(len2, _8, 2 * cdy, _16), _16,\r\n                scale(len2, _8, cdytail, _16b), _16b,\r\n                scale(len, _16c, cdytail, _32), _32, _32b, _64), _64);\r\n        }\r\n    }\r\n\r\n    return fin[finlen - 1];\r\n}\r\n\r\nexport function incircle(ax, ay, bx, by, cx, cy, dx, dy) {\r\n    const adx = ax - dx;\r\n    const bdx = bx - dx;\r\n    const cdx = cx - dx;\r\n    const ady = ay - dy;\r\n    const bdy = by - dy;\r\n    const cdy = cy - dy;\r\n\r\n    const bdxcdy = bdx * cdy;\r\n    const cdxbdy = cdx * bdy;\r\n    const alift = adx * adx + ady * ady;\r\n\r\n    const cdxady = cdx * ady;\r\n    const adxcdy = adx * cdy;\r\n    const blift = bdx * bdx + bdy * bdy;\r\n\r\n    const adxbdy = adx * bdy;\r\n    const bdxady = bdx * ady;\r\n    const clift = cdx * cdx + cdy * cdy;\r\n\r\n    const det =\r\n        alift * (bdxcdy - cdxbdy) +\r\n        blift * (cdxady - adxcdy) +\r\n        clift * (adxbdy - bdxady);\r\n\r\n    const permanent =\r\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift +\r\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * blift +\r\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;\r\n\r\n    const errbound = iccerrboundA * permanent;\r\n\r\n    if (det > errbound || -det > errbound) {\r\n        return det;\r\n    }\r\n    return incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);\r\n}\r\n\r\nexport function incirclefast(ax, ay, bx, by, cx, cy, dx, dy) {\r\n    const adx = ax - dx;\r\n    const ady = ay - dy;\r\n    const bdx = bx - dx;\r\n    const bdy = by - dy;\r\n    const cdx = cx - dx;\r\n    const cdy = cy - dy;\r\n\r\n    const abdet = adx * bdy - bdx * ady;\r\n    const bcdet = bdx * cdy - cdx * bdy;\r\n    const cadet = cdx * ady - adx * cdy;\r\n    const alift = adx * adx + ady * ady;\r\n    const blift = bdx * bdx + bdy * bdy;\r\n    const clift = cdx * cdx + cdy * cdy;\r\n\r\n    return alift * bcdet + blift * cadet + clift * abdet;\r\n}\r\n", "import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale, negate} from './util.js';\r\n\r\nconst isperrboundA = (16 + 224 * epsilon) * epsilon;\r\nconst isperrboundB = (5 + 72 * epsilon) * epsilon;\r\nconst isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;\r\n\r\nconst ab = vec(4);\r\nconst bc = vec(4);\r\nconst cd = vec(4);\r\nconst de = vec(4);\r\nconst ea = vec(4);\r\nconst ac = vec(4);\r\nconst bd = vec(4);\r\nconst ce = vec(4);\r\nconst da = vec(4);\r\nconst eb = vec(4);\r\n\r\nconst abc = vec(24);\r\nconst bcd = vec(24);\r\nconst cde = vec(24);\r\nconst dea = vec(24);\r\nconst eab = vec(24);\r\nconst abd = vec(24);\r\nconst bce = vec(24);\r\nconst cda = vec(24);\r\nconst deb = vec(24);\r\nconst eac = vec(24);\r\n\r\nconst adet = vec(1152);\r\nconst bdet = vec(1152);\r\nconst cdet = vec(1152);\r\nconst ddet = vec(1152);\r\nconst edet = vec(1152);\r\nconst abdet = vec(2304);\r\nconst cddet = vec(2304);\r\nconst cdedet = vec(3456);\r\nconst deter = vec(5760);\r\n\r\nconst _8 = vec(8);\r\nconst _8b = vec(8);\r\nconst _8c = vec(8);\r\nconst _16 = vec(16);\r\nconst _24 = vec(24);\r\nconst _48 = vec(48);\r\nconst _48b = vec(48);\r\nconst _96 = vec(96);\r\nconst _192 = vec(192);\r\nconst _384x = vec(384);\r\nconst _384y = vec(384);\r\nconst _384z = vec(384);\r\nconst _768 = vec(768);\r\n\r\nfunction sum_three_scale(a, b, c, az, bz, cz, out) {\r\n    return sum_three(\r\n        scale(4, a, az, _8), _8,\r\n        scale(4, b, bz, _8b), _8b,\r\n        scale(4, c, cz, _8c), _8c, _16, out);\r\n}\r\n\r\nfunction liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {\r\n    const len = sum(\r\n        sum(alen, a, blen, b, _48), _48,\r\n        negate(sum(clen, c, dlen, d, _48b), _48b), _48b, _96);\r\n\r\n    return sum_three(\r\n        scale(scale(len, _96, x, _192), _192, x, _384x), _384x,\r\n        scale(scale(len, _96, y, _192), _192, y, _384y), _384y,\r\n        scale(scale(len, _96, z, _192), _192, z, _384z), _384z, _768, out);\r\n}\r\n\r\nfunction insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\r\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\r\n\r\n    s1 = ax * by;\r\n    c = splitter * ax;\r\n    ahi = c - (c - ax);\r\n    alo = ax - ahi;\r\n    c = splitter * by;\r\n    bhi = c - (c - by);\r\n    blo = by - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = bx * ay;\r\n    c = splitter * bx;\r\n    ahi = c - (c - bx);\r\n    alo = bx - ahi;\r\n    c = splitter * ay;\r\n    bhi = c - (c - ay);\r\n    blo = ay - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ab[3] = u3;\r\n    s1 = bx * cy;\r\n    c = splitter * bx;\r\n    ahi = c - (c - bx);\r\n    alo = bx - ahi;\r\n    c = splitter * cy;\r\n    bhi = c - (c - cy);\r\n    blo = cy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = cx * by;\r\n    c = splitter * cx;\r\n    ahi = c - (c - cx);\r\n    alo = cx - ahi;\r\n    c = splitter * by;\r\n    bhi = c - (c - by);\r\n    blo = by - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    bc[3] = u3;\r\n    s1 = cx * dy;\r\n    c = splitter * cx;\r\n    ahi = c - (c - cx);\r\n    alo = cx - ahi;\r\n    c = splitter * dy;\r\n    bhi = c - (c - dy);\r\n    blo = dy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = dx * cy;\r\n    c = splitter * dx;\r\n    ahi = c - (c - dx);\r\n    alo = dx - ahi;\r\n    c = splitter * cy;\r\n    bhi = c - (c - cy);\r\n    blo = cy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    cd[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    cd[3] = u3;\r\n    s1 = dx * ey;\r\n    c = splitter * dx;\r\n    ahi = c - (c - dx);\r\n    alo = dx - ahi;\r\n    c = splitter * ey;\r\n    bhi = c - (c - ey);\r\n    blo = ey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = ex * dy;\r\n    c = splitter * ex;\r\n    ahi = c - (c - ex);\r\n    alo = ex - ahi;\r\n    c = splitter * dy;\r\n    bhi = c - (c - dy);\r\n    blo = dy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    de[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    de[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    de[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    de[3] = u3;\r\n    s1 = ex * ay;\r\n    c = splitter * ex;\r\n    ahi = c - (c - ex);\r\n    alo = ex - ahi;\r\n    c = splitter * ay;\r\n    bhi = c - (c - ay);\r\n    blo = ay - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = ax * ey;\r\n    c = splitter * ax;\r\n    ahi = c - (c - ax);\r\n    alo = ax - ahi;\r\n    c = splitter * ey;\r\n    bhi = c - (c - ey);\r\n    blo = ey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ea[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ea[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ea[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ea[3] = u3;\r\n    s1 = ax * cy;\r\n    c = splitter * ax;\r\n    ahi = c - (c - ax);\r\n    alo = ax - ahi;\r\n    c = splitter * cy;\r\n    bhi = c - (c - cy);\r\n    blo = cy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = cx * ay;\r\n    c = splitter * cx;\r\n    ahi = c - (c - cx);\r\n    alo = cx - ahi;\r\n    c = splitter * ay;\r\n    bhi = c - (c - ay);\r\n    blo = ay - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ac[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ac[3] = u3;\r\n    s1 = bx * dy;\r\n    c = splitter * bx;\r\n    ahi = c - (c - bx);\r\n    alo = bx - ahi;\r\n    c = splitter * dy;\r\n    bhi = c - (c - dy);\r\n    blo = dy - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = dx * by;\r\n    c = splitter * dx;\r\n    ahi = c - (c - dx);\r\n    alo = dx - ahi;\r\n    c = splitter * by;\r\n    bhi = c - (c - by);\r\n    blo = by - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    bd[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    bd[3] = u3;\r\n    s1 = cx * ey;\r\n    c = splitter * cx;\r\n    ahi = c - (c - cx);\r\n    alo = cx - ahi;\r\n    c = splitter * ey;\r\n    bhi = c - (c - ey);\r\n    blo = ey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = ex * cy;\r\n    c = splitter * ex;\r\n    ahi = c - (c - ex);\r\n    alo = ex - ahi;\r\n    c = splitter * cy;\r\n    bhi = c - (c - cy);\r\n    blo = cy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ce[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ce[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    ce[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    ce[3] = u3;\r\n    s1 = dx * ay;\r\n    c = splitter * dx;\r\n    ahi = c - (c - dx);\r\n    alo = dx - ahi;\r\n    c = splitter * ay;\r\n    bhi = c - (c - ay);\r\n    blo = ay - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = ax * dy;\r\n    c = splitter * ax;\r\n    ahi = c - (c - ax);\r\n    alo = ax - ahi;\r\n    c = splitter * dy;\r\n    bhi = c - (c - dy);\r\n    blo = dy - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    da[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    da[3] = u3;\r\n    s1 = ex * by;\r\n    c = splitter * ex;\r\n    ahi = c - (c - ex);\r\n    alo = ex - ahi;\r\n    c = splitter * by;\r\n    bhi = c - (c - by);\r\n    blo = by - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = bx * ey;\r\n    c = splitter * bx;\r\n    ahi = c - (c - bx);\r\n    alo = bx - ahi;\r\n    c = splitter * ey;\r\n    bhi = c - (c - ey);\r\n    blo = ey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    eb[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    eb[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    u3 = _j + _i;\r\n    bvirt = u3 - _j;\r\n    eb[2] = _j - (u3 - bvirt) + (_i - bvirt);\r\n    eb[3] = u3;\r\n\r\n    const abclen = sum_three_scale(ab, bc, ac, cz, az, -bz, abc);\r\n    const bcdlen = sum_three_scale(bc, cd, bd, dz, bz, -cz, bcd);\r\n    const cdelen = sum_three_scale(cd, de, ce, ez, cz, -dz, cde);\r\n    const dealen = sum_three_scale(de, ea, da, az, dz, -ez, dea);\r\n    const eablen = sum_three_scale(ea, ab, eb, bz, ez, -az, eab);\r\n    const abdlen = sum_three_scale(ab, bd, da, dz, az, bz, abd);\r\n    const bcelen = sum_three_scale(bc, ce, eb, ez, bz, cz, bce);\r\n    const cdalen = sum_three_scale(cd, da, ac, az, cz, dz, cda);\r\n    const deblen = sum_three_scale(de, eb, bd, bz, dz, ez, deb);\r\n    const eaclen = sum_three_scale(ea, ac, ce, cz, ez, az, eac);\r\n\r\n    const deterlen = sum_three(\r\n        liftexact(cdelen, cde, bcelen, bce, deblen, deb, bcdlen, bcd, ax, ay, az, adet), adet,\r\n        liftexact(dealen, dea, cdalen, cda, eaclen, eac, cdelen, cde, bx, by, bz, bdet), bdet,\r\n        sum_three(\r\n            liftexact(eablen, eab, deblen, deb, abdlen, abd, dealen, dea, cx, cy, cz, cdet), cdet,\r\n            liftexact(abclen, abc, eaclen, eac, bcelen, bce, eablen, eab, dx, dy, dz, ddet), ddet,\r\n            liftexact(bcdlen, bcd, abdlen, abd, cdalen, cda, abclen, abc, ex, ey, ez, edet), edet, cddet, cdedet), cdedet, abdet, deter);\r\n\r\n    return deter[deterlen - 1];\r\n}\r\n\r\nconst xdet = vec(96);\r\nconst ydet = vec(96);\r\nconst zdet = vec(96);\r\nconst fin = vec(1152);\r\n\r\nfunction liftadapt(a, b, c, az, bz, cz, x, y, z, out) {\r\n    const len = sum_three_scale(a, b, c, az, bz, cz, _24);\r\n    return sum_three(\r\n        scale(scale(len, _24, x, _48), _48, x, xdet), xdet,\r\n        scale(scale(len, _24, y, _48), _48, y, ydet), ydet,\r\n        scale(scale(len, _24, z, _48), _48, z, zdet), zdet, _192, out);\r\n}\r\n\r\nfunction insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {\r\n    let ab3, bc3, cd3, da3, ac3, bd3;\r\n\r\n    let aextail, bextail, cextail, dextail;\r\n    let aeytail, beytail, ceytail, deytail;\r\n    let aeztail, beztail, ceztail, deztail;\r\n\r\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;\r\n\r\n    const aex = ax - ex;\r\n    const bex = bx - ex;\r\n    const cex = cx - ex;\r\n    const dex = dx - ex;\r\n    const aey = ay - ey;\r\n    const bey = by - ey;\r\n    const cey = cy - ey;\r\n    const dey = dy - ey;\r\n    const aez = az - ez;\r\n    const bez = bz - ez;\r\n    const cez = cz - ez;\r\n    const dez = dz - ez;\r\n\r\n    s1 = aex * bey;\r\n    c = splitter * aex;\r\n    ahi = c - (c - aex);\r\n    alo = aex - ahi;\r\n    c = splitter * bey;\r\n    bhi = c - (c - bey);\r\n    blo = bey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = bex * aey;\r\n    c = splitter * bex;\r\n    ahi = c - (c - bex);\r\n    alo = bex - ahi;\r\n    c = splitter * aey;\r\n    bhi = c - (c - aey);\r\n    blo = aey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    ab3 = _j + _i;\r\n    bvirt = ab3 - _j;\r\n    ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);\r\n    ab[3] = ab3;\r\n    s1 = bex * cey;\r\n    c = splitter * bex;\r\n    ahi = c - (c - bex);\r\n    alo = bex - ahi;\r\n    c = splitter * cey;\r\n    bhi = c - (c - cey);\r\n    blo = cey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = cex * bey;\r\n    c = splitter * cex;\r\n    ahi = c - (c - cex);\r\n    alo = cex - ahi;\r\n    c = splitter * bey;\r\n    bhi = c - (c - bey);\r\n    blo = bey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    bc3 = _j + _i;\r\n    bvirt = bc3 - _j;\r\n    bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);\r\n    bc[3] = bc3;\r\n    s1 = cex * dey;\r\n    c = splitter * cex;\r\n    ahi = c - (c - cex);\r\n    alo = cex - ahi;\r\n    c = splitter * dey;\r\n    bhi = c - (c - dey);\r\n    blo = dey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = dex * cey;\r\n    c = splitter * dex;\r\n    ahi = c - (c - dex);\r\n    alo = dex - ahi;\r\n    c = splitter * cey;\r\n    bhi = c - (c - cey);\r\n    blo = cey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    cd3 = _j + _i;\r\n    bvirt = cd3 - _j;\r\n    cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);\r\n    cd[3] = cd3;\r\n    s1 = dex * aey;\r\n    c = splitter * dex;\r\n    ahi = c - (c - dex);\r\n    alo = dex - ahi;\r\n    c = splitter * aey;\r\n    bhi = c - (c - aey);\r\n    blo = aey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = aex * dey;\r\n    c = splitter * aex;\r\n    ahi = c - (c - aex);\r\n    alo = aex - ahi;\r\n    c = splitter * dey;\r\n    bhi = c - (c - dey);\r\n    blo = dey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    da3 = _j + _i;\r\n    bvirt = da3 - _j;\r\n    da[2] = _j - (da3 - bvirt) + (_i - bvirt);\r\n    da[3] = da3;\r\n    s1 = aex * cey;\r\n    c = splitter * aex;\r\n    ahi = c - (c - aex);\r\n    alo = aex - ahi;\r\n    c = splitter * cey;\r\n    bhi = c - (c - cey);\r\n    blo = cey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = cex * aey;\r\n    c = splitter * cex;\r\n    ahi = c - (c - cex);\r\n    alo = cex - ahi;\r\n    c = splitter * aey;\r\n    bhi = c - (c - aey);\r\n    blo = aey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    ac3 = _j + _i;\r\n    bvirt = ac3 - _j;\r\n    ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);\r\n    ac[3] = ac3;\r\n    s1 = bex * dey;\r\n    c = splitter * bex;\r\n    ahi = c - (c - bex);\r\n    alo = bex - ahi;\r\n    c = splitter * dey;\r\n    bhi = c - (c - dey);\r\n    blo = dey - bhi;\r\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    t1 = dex * bey;\r\n    c = splitter * dex;\r\n    ahi = c - (c - dex);\r\n    alo = dex - ahi;\r\n    c = splitter * bey;\r\n    bhi = c - (c - bey);\r\n    blo = bey - bhi;\r\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\r\n    _i = s0 - t0;\r\n    bvirt = s0 - _i;\r\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\r\n    _j = s1 + _i;\r\n    bvirt = _j - s1;\r\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\r\n    _i = _0 - t1;\r\n    bvirt = _0 - _i;\r\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\r\n    bd3 = _j + _i;\r\n    bvirt = bd3 - _j;\r\n    bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);\r\n    bd[3] = bd3;\r\n\r\n    const finlen = sum(\r\n        sum(\r\n            negate(liftadapt(bc, cd, bd, dez, bez, -cez, aex, aey, aez, adet), adet), adet,\r\n            liftadapt(cd, da, ac, aez, cez, dez, bex, bey, bez, bdet), bdet, abdet), abdet,\r\n        sum(\r\n            negate(liftadapt(da, ab, bd, bez, dez, aez, cex, cey, cez, cdet), cdet), cdet,\r\n            liftadapt(ab, bc, ac, cez, aez, -bez, dex, dey, dez, ddet), ddet, cddet), cddet, fin);\r\n\r\n    let det = estimate(finlen, fin);\r\n    let errbound = isperrboundB * permanent;\r\n    if (det >= errbound || -det >= errbound) {\r\n        return det;\r\n    }\r\n\r\n    bvirt = ax - aex;\r\n    aextail = ax - (aex + bvirt) + (bvirt - ex);\r\n    bvirt = ay - aey;\r\n    aeytail = ay - (aey + bvirt) + (bvirt - ey);\r\n    bvirt = az - aez;\r\n    aeztail = az - (aez + bvirt) + (bvirt - ez);\r\n    bvirt = bx - bex;\r\n    bextail = bx - (bex + bvirt) + (bvirt - ex);\r\n    bvirt = by - bey;\r\n    beytail = by - (bey + bvirt) + (bvirt - ey);\r\n    bvirt = bz - bez;\r\n    beztail = bz - (bez + bvirt) + (bvirt - ez);\r\n    bvirt = cx - cex;\r\n    cextail = cx - (cex + bvirt) + (bvirt - ex);\r\n    bvirt = cy - cey;\r\n    ceytail = cy - (cey + bvirt) + (bvirt - ey);\r\n    bvirt = cz - cez;\r\n    ceztail = cz - (cez + bvirt) + (bvirt - ez);\r\n    bvirt = dx - dex;\r\n    dextail = dx - (dex + bvirt) + (bvirt - ex);\r\n    bvirt = dy - dey;\r\n    deytail = dy - (dey + bvirt) + (bvirt - ey);\r\n    bvirt = dz - dez;\r\n    deztail = dz - (dez + bvirt) + (bvirt - ez);\r\n    if (aextail === 0 && aeytail === 0 && aeztail === 0 &&\r\n        bextail === 0 && beytail === 0 && beztail === 0 &&\r\n        cextail === 0 && ceytail === 0 && ceztail === 0 &&\r\n        dextail === 0 && deytail === 0 && deztail === 0) {\r\n        return det;\r\n    }\r\n\r\n    errbound = isperrboundC * permanent + resulterrbound * Math.abs(det);\r\n\r\n    const abeps = (aex * beytail + bey * aextail) - (aey * bextail + bex * aeytail);\r\n    const bceps = (bex * ceytail + cey * bextail) - (bey * cextail + cex * beytail);\r\n    const cdeps = (cex * deytail + dey * cextail) - (cey * dextail + dex * ceytail);\r\n    const daeps = (dex * aeytail + aey * dextail) - (dey * aextail + aex * deytail);\r\n    const aceps = (aex * ceytail + cey * aextail) - (aey * cextail + cex * aeytail);\r\n    const bdeps = (bex * deytail + dey * bextail) - (bey * dextail + dex * beytail);\r\n    det +=\r\n        (((bex * bex + bey * bey + bez * bez) * ((cez * daeps + dez * aceps + aez * cdeps) +\r\n        (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) *\r\n        ((aez * bceps - bez * aceps + cez * abeps) + (aeztail * bc3 - beztail * ac3 + ceztail * ab3))) -\r\n        ((aex * aex + aey * aey + aez * aez) * ((bez * cdeps - cez * bdeps + dez * bceps) +\r\n        (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) *\r\n        ((dez * abeps + aez * bdeps + bez * daeps) + (deztail * ab3 + aeztail * bd3 + beztail * da3)))) +\r\n        2 * (((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) +\r\n        (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3)) -\r\n        ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) +\r\n        (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));\r\n\r\n    if (det >= errbound || -det >= errbound) {\r\n        return det;\r\n    }\r\n\r\n    return insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);\r\n}\r\n\r\nexport function insphere(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\r\n    const aex = ax - ex;\r\n    const bex = bx - ex;\r\n    const cex = cx - ex;\r\n    const dex = dx - ex;\r\n    const aey = ay - ey;\r\n    const bey = by - ey;\r\n    const cey = cy - ey;\r\n    const dey = dy - ey;\r\n    const aez = az - ez;\r\n    const bez = bz - ez;\r\n    const cez = cz - ez;\r\n    const dez = dz - ez;\r\n\r\n    const aexbey = aex * bey;\r\n    const bexaey = bex * aey;\r\n    const ab = aexbey - bexaey;\r\n    const bexcey = bex * cey;\r\n    const cexbey = cex * bey;\r\n    const bc = bexcey - cexbey;\r\n    const cexdey = cex * dey;\r\n    const dexcey = dex * cey;\r\n    const cd = cexdey - dexcey;\r\n    const dexaey = dex * aey;\r\n    const aexdey = aex * dey;\r\n    const da = dexaey - aexdey;\r\n    const aexcey = aex * cey;\r\n    const cexaey = cex * aey;\r\n    const ac = aexcey - cexaey;\r\n    const bexdey = bex * dey;\r\n    const dexbey = dex * bey;\r\n    const bd = bexdey - dexbey;\r\n\r\n    const abc = aez * bc - bez * ac + cez * ab;\r\n    const bcd = bez * cd - cez * bd + dez * bc;\r\n    const cda = cez * da + dez * ac + aez * cd;\r\n    const dab = dez * ab + aez * bd + bez * da;\r\n\r\n    const alift = aex * aex + aey * aey + aez * aez;\r\n    const blift = bex * bex + bey * bey + bez * bez;\r\n    const clift = cex * cex + cey * cey + cez * cez;\r\n    const dlift = dex * dex + dey * dey + dez * dez;\r\n\r\n    const det = (clift * dab - dlift * abc) + (alift * bcd - blift * cda);\r\n\r\n    const aezplus = Math.abs(aez);\r\n    const bezplus = Math.abs(bez);\r\n    const cezplus = Math.abs(cez);\r\n    const dezplus = Math.abs(dez);\r\n    const aexbeyplus = Math.abs(aexbey);\r\n    const bexaeyplus = Math.abs(bexaey);\r\n    const bexceyplus = Math.abs(bexcey);\r\n    const cexbeyplus = Math.abs(cexbey);\r\n    const cexdeyplus = Math.abs(cexdey);\r\n    const dexceyplus = Math.abs(dexcey);\r\n    const dexaeyplus = Math.abs(dexaey);\r\n    const aexdeyplus = Math.abs(aexdey);\r\n    const aexceyplus = Math.abs(aexcey);\r\n    const cexaeyplus = Math.abs(cexaey);\r\n    const bexdeyplus = Math.abs(bexdey);\r\n    const dexbeyplus = Math.abs(dexbey);\r\n    const permanent =\r\n        ((cexdeyplus + dexceyplus) * bezplus + (dexbeyplus + bexdeyplus) * cezplus + (bexceyplus + cexbeyplus) * dezplus) * alift +\r\n        ((dexaeyplus + aexdeyplus) * cezplus + (aexceyplus + cexaeyplus) * dezplus + (cexdeyplus + dexceyplus) * aezplus) * blift +\r\n        ((aexbeyplus + bexaeyplus) * dezplus + (bexdeyplus + dexbeyplus) * aezplus + (dexaeyplus + aexdeyplus) * bezplus) * clift +\r\n        ((bexceyplus + cexbeyplus) * aezplus + (cexaeyplus + aexceyplus) * bezplus + (aexbeyplus + bexaeyplus) * cezplus) * dlift;\r\n\r\n    const errbound = isperrboundA * permanent;\r\n    if (det > errbound || -det > errbound) {\r\n        return det;\r\n    }\r\n    return -insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);\r\n}\r\n\r\nexport function inspherefast(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {\r\n    const aex = pax - pex;\r\n    const bex = pbx - pex;\r\n    const cex = pcx - pex;\r\n    const dex = pdx - pex;\r\n    const aey = pay - pey;\r\n    const bey = pby - pey;\r\n    const cey = pcy - pey;\r\n    const dey = pdy - pey;\r\n    const aez = paz - pez;\r\n    const bez = pbz - pez;\r\n    const cez = pcz - pez;\r\n    const dez = pdz - pez;\r\n\r\n    const ab = aex * bey - bex * aey;\r\n    const bc = bex * cey - cex * bey;\r\n    const cd = cex * dey - dex * cey;\r\n    const da = dex * aey - aex * dey;\r\n    const ac = aex * cey - cex * aey;\r\n    const bd = bex * dey - dex * bey;\r\n\r\n    const abc = aez * bc - bez * ac + cez * ab;\r\n    const bcd = bez * cd - cez * bd + dez * bc;\r\n    const cda = cez * da + dez * ac + aez * cd;\r\n    const dab = dez * ab + aez * bd + bez * da;\r\n\r\n    const alift = aex * aex + aey * aey + aez * aez;\r\n    const blift = bex * bex + bey * bey + bez * bez;\r\n    const clift = cex * cex + cey * cey + cez * cez;\r\n    const dlift = dex * dex + dey * dey + dez * dez;\r\n\r\n    return (clift * dab - dlift * abc) + (alift * bcd - blift * cda);\r\n}\r\n", "\r\nconst EPSILON = Math.pow(2, -52);\r\nconst EDGE_STACK = new Uint32Array(512);\r\n\r\nimport {orient2d} from 'robust-predicates';\r\n\r\nexport default class Delaunator {\r\n\r\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\r\n        const n = points.length;\r\n        const coords = new Float64Array(n * 2);\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const p = points[i];\r\n            coords[2 * i] = getX(p);\r\n            coords[2 * i + 1] = getY(p);\r\n        }\r\n\r\n        return new Delaunator(coords);\r\n    }\r\n\r\n    constructor(coords) {\r\n        const n = coords.length >> 1;\r\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\r\n\r\n        this.coords = coords;\r\n\r\n        // arrays that will store the triangulation graph\r\n        const maxTriangles = Math.max(2 * n - 5, 0);\r\n        this._triangles = new Uint32Array(maxTriangles * 3);\r\n        this._halfedges = new Int32Array(maxTriangles * 3);\r\n\r\n        // temporary arrays for tracking the edges of the advancing convex hull\r\n        this._hashSize = Math.ceil(Math.sqrt(n));\r\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\r\n        this._hullNext = new Uint32Array(n); // edge to next edge\r\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\r\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\r\n\r\n        // temporary arrays for sorting points\r\n        this._ids = new Uint32Array(n);\r\n        this._dists = new Float64Array(n);\r\n\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\r\n        const n = coords.length >> 1;\r\n\r\n        // populate an array of point indices; calculate input data bbox\r\n        let minX = Infinity;\r\n        let minY = Infinity;\r\n        let maxX = -Infinity;\r\n        let maxY = -Infinity;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            const x = coords[2 * i];\r\n            const y = coords[2 * i + 1];\r\n            if (x < minX) minX = x;\r\n            if (y < minY) minY = y;\r\n            if (x > maxX) maxX = x;\r\n            if (y > maxY) maxY = y;\r\n            this._ids[i] = i;\r\n        }\r\n        const cx = (minX + maxX) / 2;\r\n        const cy = (minY + maxY) / 2;\r\n\r\n        let minDist = Infinity;\r\n        let i0, i1, i2;\r\n\r\n        // pick a seed point close to the center\r\n        for (let i = 0; i < n; i++) {\r\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\r\n            if (d < minDist) {\r\n                i0 = i;\r\n                minDist = d;\r\n            }\r\n        }\r\n        const i0x = coords[2 * i0];\r\n        const i0y = coords[2 * i0 + 1];\r\n\r\n        minDist = Infinity;\r\n\r\n        // find the point closest to the seed\r\n        for (let i = 0; i < n; i++) {\r\n            if (i === i0) continue;\r\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\r\n            if (d < minDist && d > 0) {\r\n                i1 = i;\r\n                minDist = d;\r\n            }\r\n        }\r\n        let i1x = coords[2 * i1];\r\n        let i1y = coords[2 * i1 + 1];\r\n\r\n        let minRadius = Infinity;\r\n\r\n        // find the third point which forms the smallest circumcircle with the first two\r\n        for (let i = 0; i < n; i++) {\r\n            if (i === i0 || i === i1) continue;\r\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\r\n            if (r < minRadius) {\r\n                i2 = i;\r\n                minRadius = r;\r\n            }\r\n        }\r\n        let i2x = coords[2 * i2];\r\n        let i2y = coords[2 * i2 + 1];\r\n\r\n        if (minRadius === Infinity) {\r\n            // order collinear points by dx (or dy if all x are identical)\r\n            // and return the list as a hull\r\n            for (let i = 0; i < n; i++) {\r\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\r\n            }\r\n            quicksort(this._ids, this._dists, 0, n - 1);\r\n            const hull = new Uint32Array(n);\r\n            let j = 0;\r\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\r\n                const id = this._ids[i];\r\n                if (this._dists[id] > d0) {\r\n                    hull[j++] = id;\r\n                    d0 = this._dists[id];\r\n                }\r\n            }\r\n            this.hull = hull.subarray(0, j);\r\n            this.triangles = new Uint32Array(0);\r\n            this.halfedges = new Uint32Array(0);\r\n            return;\r\n        }\r\n\r\n        // swap the order of the seed points for counter-clockwise orientation\r\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\r\n            const i = i1;\r\n            const x = i1x;\r\n            const y = i1y;\r\n            i1 = i2;\r\n            i1x = i2x;\r\n            i1y = i2y;\r\n            i2 = i;\r\n            i2x = x;\r\n            i2y = y;\r\n        }\r\n\r\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\r\n        this._cx = center.x;\r\n        this._cy = center.y;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\r\n        }\r\n\r\n        // sort the points by distance from the seed triangle circumcenter\r\n        quicksort(this._ids, this._dists, 0, n - 1);\r\n\r\n        // set up the seed triangle as the starting hull\r\n        this._hullStart = i0;\r\n        let hullSize = 3;\r\n\r\n        hullNext[i0] = hullPrev[i2] = i1;\r\n        hullNext[i1] = hullPrev[i0] = i2;\r\n        hullNext[i2] = hullPrev[i1] = i0;\r\n\r\n        hullTri[i0] = 0;\r\n        hullTri[i1] = 1;\r\n        hullTri[i2] = 2;\r\n\r\n        hullHash.fill(-1);\r\n        hullHash[this._hashKey(i0x, i0y)] = i0;\r\n        hullHash[this._hashKey(i1x, i1y)] = i1;\r\n        hullHash[this._hashKey(i2x, i2y)] = i2;\r\n\r\n        this.trianglesLen = 0;\r\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\r\n\r\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\r\n            const i = this._ids[k];\r\n            const x = coords[2 * i];\r\n            const y = coords[2 * i + 1];\r\n\r\n            // skip near-duplicate points\r\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\r\n            xp = x;\r\n            yp = y;\r\n\r\n            // skip seed triangle points\r\n            if (i === i0 || i === i1 || i === i2) continue;\r\n\r\n            // find a visible edge on the convex hull using edge hash\r\n            let start = 0;\r\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\r\n                start = hullHash[(key + j) % this._hashSize];\r\n                if (start !== -1 && start !== hullNext[start]) break;\r\n            }\r\n\r\n            start = hullPrev[start];\r\n            let e = start, q;\r\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\r\n                e = q;\r\n                if (e === start) {\r\n                    e = -1;\r\n                    break;\r\n                }\r\n            }\r\n            if (e === -1) continue; // likely a near-duplicate point; skip it\r\n\r\n            // add the first triangle from the point\r\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\r\n\r\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\r\n            hullTri[i] = this._legalize(t + 2);\r\n            hullTri[e] = t; // keep track of boundary triangles on the hull\r\n            hullSize++;\r\n\r\n            // walk forward through the hull, adding more triangles and flipping recursively\r\n            let n = hullNext[e];\r\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\r\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\r\n                hullTri[i] = this._legalize(t + 2);\r\n                hullNext[n] = n; // mark as removed\r\n                hullSize--;\r\n                n = q;\r\n            }\r\n\r\n            // walk backward from the other side, adding more triangles and flipping\r\n            if (e === start) {\r\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\r\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\r\n                    this._legalize(t + 2);\r\n                    hullTri[q] = t;\r\n                    hullNext[e] = e; // mark as removed\r\n                    hullSize--;\r\n                    e = q;\r\n                }\r\n            }\r\n\r\n            // update the hull indices\r\n            this._hullStart = hullPrev[i] = e;\r\n            hullNext[e] = hullPrev[n] = i;\r\n            hullNext[i] = n;\r\n\r\n            // save the two new edges in the hash table\r\n            hullHash[this._hashKey(x, y)] = i;\r\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\r\n        }\r\n\r\n        this.hull = new Uint32Array(hullSize);\r\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\r\n            this.hull[i] = e;\r\n            e = hullNext[e];\r\n        }\r\n\r\n        // trim typed triangle mesh arrays\r\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\r\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\r\n    }\r\n\r\n    _hashKey(x, y) {\r\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\r\n    }\r\n\r\n    _legalize(a) {\r\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\r\n\r\n        let i = 0;\r\n        let ar = 0;\r\n\r\n        // recursion eliminated with a fixed-size stack\r\n        while (true) {\r\n            const b = halfedges[a];\r\n\r\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\r\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\r\n             * then do the same check/flip recursively for the new pair of triangles\r\n             *\r\n             *           pl                    pl\r\n             *          /||\\                  /  \\\r\n             *       al/ || \\bl            al/    \\a\r\n             *        /  ||  \\              /      \\\r\n             *       /  a||b  \\    flip    /___ar___\\\r\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\r\n             *        \\  ||  /              \\      /\r\n             *       ar\\ || /br             b\\    /br\r\n             *          \\||/                  \\  /\r\n             *           pr                    pr\r\n             */\r\n            const a0 = a - a % 3;\r\n            ar = a0 + (a + 2) % 3;\r\n\r\n            if (b === -1) { // convex hull edge\r\n                if (i === 0) break;\r\n                a = EDGE_STACK[--i];\r\n                continue;\r\n            }\r\n\r\n            const b0 = b - b % 3;\r\n            const al = a0 + (a + 1) % 3;\r\n            const bl = b0 + (b + 2) % 3;\r\n\r\n            const p0 = triangles[ar];\r\n            const pr = triangles[a];\r\n            const pl = triangles[al];\r\n            const p1 = triangles[bl];\r\n\r\n            const illegal = inCircle(\r\n                coords[2 * p0], coords[2 * p0 + 1],\r\n                coords[2 * pr], coords[2 * pr + 1],\r\n                coords[2 * pl], coords[2 * pl + 1],\r\n                coords[2 * p1], coords[2 * p1 + 1]);\r\n\r\n            if (illegal) {\r\n                triangles[a] = p1;\r\n                triangles[b] = p0;\r\n\r\n                const hbl = halfedges[bl];\r\n\r\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\r\n                if (hbl === -1) {\r\n                    let e = this._hullStart;\r\n                    do {\r\n                        if (this._hullTri[e] === bl) {\r\n                            this._hullTri[e] = a;\r\n                            break;\r\n                        }\r\n                        e = this._hullPrev[e];\r\n                    } while (e !== this._hullStart);\r\n                }\r\n                this._link(a, hbl);\r\n                this._link(b, halfedges[ar]);\r\n                this._link(ar, bl);\r\n\r\n                const br = b0 + (b + 1) % 3;\r\n\r\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\r\n                if (i < EDGE_STACK.length) {\r\n                    EDGE_STACK[i++] = br;\r\n                }\r\n            } else {\r\n                if (i === 0) break;\r\n                a = EDGE_STACK[--i];\r\n            }\r\n        }\r\n\r\n        return ar;\r\n    }\r\n\r\n    _link(a, b) {\r\n        this._halfedges[a] = b;\r\n        if (b !== -1) this._halfedges[b] = a;\r\n    }\r\n\r\n    // add a new triangle given vertex indices and adjacent half-edge ids\r\n    _addTriangle(i0, i1, i2, a, b, c) {\r\n        const t = this.trianglesLen;\r\n\r\n        this._triangles[t] = i0;\r\n        this._triangles[t + 1] = i1;\r\n        this._triangles[t + 2] = i2;\r\n\r\n        this._link(t, a);\r\n        this._link(t + 1, b);\r\n        this._link(t + 2, c);\r\n\r\n        this.trianglesLen += 3;\r\n\r\n        return t;\r\n    }\r\n}\r\n\r\n// monotonically increases with real angle, but doesn't need expensive trigonometry\r\nfunction pseudoAngle(dx, dy) {\r\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\r\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\r\n}\r\n\r\nfunction dist(ax, ay, bx, by) {\r\n    const dx = ax - bx;\r\n    const dy = ay - by;\r\n    return dx * dx + dy * dy;\r\n}\r\n\r\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\r\n    const dx = ax - px;\r\n    const dy = ay - py;\r\n    const ex = bx - px;\r\n    const ey = by - py;\r\n    const fx = cx - px;\r\n    const fy = cy - py;\r\n\r\n    const ap = dx * dx + dy * dy;\r\n    const bp = ex * ex + ey * ey;\r\n    const cp = fx * fx + fy * fy;\r\n\r\n    return dx * (ey * cp - bp * fy) -\r\n           dy * (ex * cp - bp * fx) +\r\n           ap * (ex * fy - ey * fx) < 0;\r\n}\r\n\r\nfunction circumradius(ax, ay, bx, by, cx, cy) {\r\n    const dx = bx - ax;\r\n    const dy = by - ay;\r\n    const ex = cx - ax;\r\n    const ey = cy - ay;\r\n\r\n    const bl = dx * dx + dy * dy;\r\n    const cl = ex * ex + ey * ey;\r\n    const d = 0.5 / (dx * ey - dy * ex);\r\n\r\n    const x = (ey * bl - dy * cl) * d;\r\n    const y = (dx * cl - ex * bl) * d;\r\n\r\n    return x * x + y * y;\r\n}\r\n\r\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\r\n    const dx = bx - ax;\r\n    const dy = by - ay;\r\n    const ex = cx - ax;\r\n    const ey = cy - ay;\r\n\r\n    const bl = dx * dx + dy * dy;\r\n    const cl = ex * ex + ey * ey;\r\n    const d = 0.5 / (dx * ey - dy * ex);\r\n\r\n    const x = ax + (ey * bl - dy * cl) * d;\r\n    const y = ay + (dx * cl - ex * bl) * d;\r\n\r\n    return {x, y};\r\n}\r\n\r\nfunction quicksort(ids, dists, left, right) {\r\n    if (right - left <= 20) {\r\n        for (let i = left + 1; i <= right; i++) {\r\n            const temp = ids[i];\r\n            const tempDist = dists[temp];\r\n            let j = i - 1;\r\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\r\n            ids[j + 1] = temp;\r\n        }\r\n    } else {\r\n        const median = (left + right) >> 1;\r\n        let i = left + 1;\r\n        let j = right;\r\n        swap(ids, median, i);\r\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\r\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\r\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\r\n\r\n        const temp = ids[i];\r\n        const tempDist = dists[temp];\r\n        while (true) {\r\n            do i++; while (dists[ids[i]] < tempDist);\r\n            do j--; while (dists[ids[j]] > tempDist);\r\n            if (j < i) break;\r\n            swap(ids, i, j);\r\n        }\r\n        ids[left + 1] = ids[j];\r\n        ids[j] = temp;\r\n\r\n        if (right - i + 1 >= j - left) {\r\n            quicksort(ids, dists, i, right);\r\n            quicksort(ids, dists, left, j - 1);\r\n        } else {\r\n            quicksort(ids, dists, left, j - 1);\r\n            quicksort(ids, dists, i, right);\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    const tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nfunction defaultGetX(p) {\r\n    return p[0];\r\n}\r\nfunction defaultGetY(p) {\r\n    return p[1];\r\n}\r\n", "const epsilon = 1e-6;\r\n\r\nexport default class Path {\r\n  constructor() {\r\n    this._x0 = this._y0 = // start of current subpath\r\n    this._x1 = this._y1 = null; // end of current subpath\r\n    this._ = \"\";\r\n  }\r\n  moveTo(x, y) {\r\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\r\n  }\r\n  closePath() {\r\n    if (this._x1 !== null) {\r\n      this._x1 = this._x0, this._y1 = this._y0;\r\n      this._ += \"Z\";\r\n    }\r\n  }\r\n  lineTo(x, y) {\r\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\r\n  }\r\n  arc(x, y, r) {\r\n    x = +x, y = +y, r = +r;\r\n    const x0 = x + r;\r\n    const y0 = y;\r\n    if (r < 0) throw new Error(\"negative radius\");\r\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\r\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\r\n    if (!r) return;\r\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\r\n  }\r\n  rect(x, y, w, h) {\r\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\r\n  }\r\n  value() {\r\n    return this._ || null;\r\n  }\r\n}\r\n", "export default class Polygon {\r\n  constructor() {\r\n    this._ = [];\r\n  }\r\n  moveTo(x, y) {\r\n    this._.push([x, y]);\r\n  }\r\n  closePath() {\r\n    this._.push(this._[0].slice());\r\n  }\r\n  lineTo(x, y) {\r\n    this._.push([x, y]);\r\n  }\r\n  value() {\r\n    return this._.length ? this._ : null;\r\n  }\r\n}\r\n", "import Path from \"./path.js\";\r\nimport Polygon from \"./polygon.js\";\r\n\r\nexport default class Voronoi {\r\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\r\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\r\n    this.delaunay = delaunay;\r\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\r\n    this.vectors = new Float64Array(delaunay.points.length * 2);\r\n    this.xmax = xmax, this.xmin = xmin;\r\n    this.ymax = ymax, this.ymin = ymin;\r\n    this._init();\r\n  }\r\n  update() {\r\n    this.delaunay.update();\r\n    this._init();\r\n    return this;\r\n  }\r\n  _init() {\r\n    const {delaunay: {points, hull, triangles}, vectors} = this;\r\n\r\n    // Compute circumcenters.\r\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\r\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\r\n      const t1 = triangles[i] * 2;\r\n      const t2 = triangles[i + 1] * 2;\r\n      const t3 = triangles[i + 2] * 2;\r\n      const x1 = points[t1];\r\n      const y1 = points[t1 + 1];\r\n      const x2 = points[t2];\r\n      const y2 = points[t2 + 1];\r\n      const x3 = points[t3];\r\n      const y3 = points[t3 + 1];\r\n\r\n      const dx = x2 - x1;\r\n      const dy = y2 - y1;\r\n      const ex = x3 - x1;\r\n      const ey = y3 - y1;\r\n      const ab = (dx * ey - dy * ex) * 2;\r\n\r\n      if (Math.abs(ab) < 1e-9) {\r\n        // degenerate case (collinear diagram)\r\n        // almost equal points (degenerate triangle)\r\n        // the circumcenter is at the infinity, in a\r\n        // direction that is:\r\n        // 1. orthogonal to the halfedge.\r\n        let a = 1e9;\r\n        // 2. points away from the center; since the list of triangles starts\r\n        // in the center, the first point of the first triangle\r\n        // will be our reference\r\n        const r = triangles[0] * 2;\r\n        a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);\r\n        x = (x1 + x3) / 2 - a * ey;\r\n        y = (y1 + y3) / 2 + a * ex;\r\n      } else {\r\n        const d = 1 / ab;\r\n        const bl = dx * dx + dy * dy;\r\n        const cl = ex * ex + ey * ey;\r\n        x = x1 + (ey * bl - dy * cl) * d;\r\n        y = y1 + (dx * cl - ex * bl) * d;\r\n      }\r\n      circumcenters[j] = x;\r\n      circumcenters[j + 1] = y;\r\n    }\r\n\r\n    // Compute exterior cell rays.\r\n    let h = hull[hull.length - 1];\r\n    let p0, p1 = h * 4;\r\n    let x0, x1 = points[2 * h];\r\n    let y0, y1 = points[2 * h + 1];\r\n    vectors.fill(0);\r\n    for (let i = 0; i < hull.length; ++i) {\r\n      h = hull[i];\r\n      p0 = p1, x0 = x1, y0 = y1;\r\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\r\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\r\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\r\n    }\r\n  }\r\n  render(context) {\r\n    const buffer = context == null ? context = new Path : undefined;\r\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\r\n    if (hull.length <= 1) return null;\r\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\r\n      const j = halfedges[i];\r\n      if (j < i) continue;\r\n      const ti = Math.floor(i / 3) * 2;\r\n      const tj = Math.floor(j / 3) * 2;\r\n      const xi = circumcenters[ti];\r\n      const yi = circumcenters[ti + 1];\r\n      const xj = circumcenters[tj];\r\n      const yj = circumcenters[tj + 1];\r\n      this._renderSegment(xi, yi, xj, yj, context);\r\n    }\r\n    let h0, h1 = hull[hull.length - 1];\r\n    for (let i = 0; i < hull.length; ++i) {\r\n      h0 = h1, h1 = hull[i];\r\n      const t = Math.floor(inedges[h1] / 3) * 2;\r\n      const x = circumcenters[t];\r\n      const y = circumcenters[t + 1];\r\n      const v = h0 * 4;\r\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\r\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\r\n    }\r\n    return buffer && buffer.value();\r\n  }\r\n  renderBounds(context) {\r\n    const buffer = context == null ? context = new Path : undefined;\r\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\r\n    return buffer && buffer.value();\r\n  }\r\n  renderCell(i, context) {\r\n    const buffer = context == null ? context = new Path : undefined;\r\n    const points = this._clip(i);\r\n    if (points === null || !points.length) return;\r\n    context.moveTo(points[0], points[1]);\r\n    let n = points.length;\r\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\r\n    for (let i = 2; i < n; i += 2) {\r\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\r\n        context.lineTo(points[i], points[i + 1]);\r\n    }\r\n    context.closePath();\r\n    return buffer && buffer.value();\r\n  }\r\n  *cellPolygons() {\r\n    const {delaunay: {points}} = this;\r\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\r\n      const cell = this.cellPolygon(i);\r\n      if (cell) cell.index = i, yield cell;\r\n    }\r\n  }\r\n  cellPolygon(i) {\r\n    const polygon = new Polygon;\r\n    this.renderCell(i, polygon);\r\n    return polygon.value();\r\n  }\r\n  _renderSegment(x0, y0, x1, y1, context) {\r\n    let S;\r\n    const c0 = this._regioncode(x0, y0);\r\n    const c1 = this._regioncode(x1, y1);\r\n    if (c0 === 0 && c1 === 0) {\r\n      context.moveTo(x0, y0);\r\n      context.lineTo(x1, y1);\r\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\r\n      context.moveTo(S[0], S[1]);\r\n      context.lineTo(S[2], S[3]);\r\n    }\r\n  }\r\n  contains(i, x, y) {\r\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\r\n    return this.delaunay._step(i, x, y) === i;\r\n  }\r\n  *neighbors(i) {\r\n    const ci = this._clip(i);\r\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\r\n      const cj = this._clip(j);\r\n      // find the common edge\r\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\r\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\r\n          if (ci[ai] == cj[aj]\r\n          && ci[ai + 1] == cj[aj + 1]\r\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\r\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\r\n          ) {\r\n            yield j;\r\n            break loop;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  _cell(i) {\r\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\r\n    const e0 = inedges[i];\r\n    if (e0 === -1) return null; // coincident point\r\n    const points = [];\r\n    let e = e0;\r\n    do {\r\n      const t = Math.floor(e / 3);\r\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\r\n      e = e % 3 === 2 ? e - 2 : e + 1;\r\n      if (triangles[e] !== i) break; // bad triangulation\r\n      e = halfedges[e];\r\n    } while (e !== e0 && e !== -1);\r\n    return points;\r\n  }\r\n  _clip(i) {\r\n    // degenerate case (1 valid point: return the box)\r\n    if (i === 0 && this.delaunay.hull.length === 1) {\r\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\r\n    }\r\n    const points = this._cell(i);\r\n    if (points === null) return null;\r\n    const {vectors: V} = this;\r\n    const v = i * 4;\r\n    return V[v] || V[v + 1]\r\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\r\n        : this._clipFinite(i, points);\r\n  }\r\n  _clipFinite(i, points) {\r\n    const n = points.length;\r\n    let P = null;\r\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\r\n    let c0, c1 = this._regioncode(x1, y1);\r\n    let e0, e1 = 0;\r\n    for (let j = 0; j < n; j += 2) {\r\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\r\n      c0 = c1, c1 = this._regioncode(x1, y1);\r\n      if (c0 === 0 && c1 === 0) {\r\n        e0 = e1, e1 = 0;\r\n        if (P) P.push(x1, y1);\r\n        else P = [x1, y1];\r\n      } else {\r\n        let S, sx0, sy0, sx1, sy1;\r\n        if (c0 === 0) {\r\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\r\n          [sx0, sy0, sx1, sy1] = S;\r\n        } else {\r\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\r\n          [sx1, sy1, sx0, sy0] = S;\r\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\r\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\r\n          if (P) P.push(sx0, sy0);\r\n          else P = [sx0, sy0];\r\n        }\r\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\r\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\r\n        if (P) P.push(sx1, sy1);\r\n        else P = [sx1, sy1];\r\n      }\r\n    }\r\n    if (P) {\r\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\r\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\r\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\r\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\r\n    }\r\n    return P;\r\n  }\r\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\r\n    while (true) {\r\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\r\n      if (c0 & c1) return null;\r\n      let x, y, c = c0 || c1;\r\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\r\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\r\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\r\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\r\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\r\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\r\n    }\r\n  }\r\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\r\n    let P = Array.from(points), p;\r\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\r\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\r\n    if (P = this._clipFinite(i, P)) {\r\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\r\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\r\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\r\n      }\r\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\r\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\r\n    }\r\n    return P;\r\n  }\r\n  _edge(i, e0, e1, P, j) {\r\n    while (e0 !== e1) {\r\n      let x, y;\r\n      switch (e0) {\r\n        case 0b0101: e0 = 0b0100; continue; // top-left\r\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\r\n        case 0b0110: e0 = 0b0010; continue; // top-right\r\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\r\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\r\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\r\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\r\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\r\n      }\r\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\r\n      // undefined, the conditional statement will be executed.\r\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\r\n        P.splice(j, 0, x, y), j += 2;\r\n      }\r\n    }\r\n    if (P.length > 4) {\r\n      for (let i = 0; i < P.length; i+= 2) {\r\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\r\n        if (P[i] === P[j] && P[j] === P[k]\r\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\r\n          P.splice(j, 2), i -= 2;\r\n      }\r\n    }\r\n    return j;\r\n  }\r\n  _project(x0, y0, vx, vy) {\r\n    let t = Infinity, c, x, y;\r\n    if (vy < 0) { // top\r\n      if (y0 <= this.ymin) return null;\r\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\r\n    } else if (vy > 0) { // bottom\r\n      if (y0 >= this.ymax) return null;\r\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\r\n    }\r\n    if (vx > 0) { // right\r\n      if (x0 >= this.xmax) return null;\r\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\r\n    } else if (vx < 0) { // left\r\n      if (x0 <= this.xmin) return null;\r\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\r\n    }\r\n    return [x, y];\r\n  }\r\n  _edgecode(x, y) {\r\n    return (x === this.xmin ? 0b0001\r\n        : x === this.xmax ? 0b0010 : 0b0000)\r\n        | (y === this.ymin ? 0b0100\r\n        : y === this.ymax ? 0b1000 : 0b0000);\r\n  }\r\n  _regioncode(x, y) {\r\n    return (x < this.xmin ? 0b0001\r\n        : x > this.xmax ? 0b0010 : 0b0000)\r\n        | (y < this.ymin ? 0b0100\r\n        : y > this.ymax ? 0b1000 : 0b0000);\r\n  }\r\n}\r\n", "import Delaunator from \"delaunator\";\r\nimport Path from \"./path.js\";\r\nimport Polygon from \"./polygon.js\";\r\nimport Voronoi from \"./voronoi.js\";\r\n\r\nconst tau = 2 * Math.PI, pow = Math.pow;\r\n\r\nfunction pointX(p) {\r\n  return p[0];\r\n}\r\n\r\nfunction pointY(p) {\r\n  return p[1];\r\n}\r\n\r\n// A triangulation is collinear if all its triangles have a non-null area\r\nfunction collinear(d) {\r\n  const {triangles, coords} = d;\r\n  for (let i = 0; i < triangles.length; i += 3) {\r\n    const a = 2 * triangles[i],\r\n          b = 2 * triangles[i + 1],\r\n          c = 2 * triangles[i + 2],\r\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\r\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\r\n    if (cross > 1e-10) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction jitter(x, y, r) {\r\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\r\n}\r\n\r\nexport default class Delaunay {\r\n  static from(points, fx = pointX, fy = pointY, that) {\r\n    return new Delaunay(\"length\" in points\r\n        ? flatArray(points, fx, fy, that)\r\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\r\n  }\r\n  constructor(points) {\r\n    this._delaunator = new Delaunator(points);\r\n    this.inedges = new Int32Array(points.length / 2);\r\n    this._hullIndex = new Int32Array(points.length / 2);\r\n    this.points = this._delaunator.coords;\r\n    this._init();\r\n  }\r\n  update() {\r\n    this._delaunator.update();\r\n    this._init();\r\n    return this;\r\n  }\r\n  _init() {\r\n    const d = this._delaunator, points = this.points;\r\n\r\n    // check for collinear\r\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\r\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\r\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\r\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\r\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\r\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\r\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\r\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\r\n        points[2 * i] = p[0];\r\n        points[2 * i + 1] = p[1];\r\n      }\r\n      this._delaunator = new Delaunator(points);\r\n    } else {\r\n      delete this.collinear;\r\n    }\r\n\r\n    const halfedges = this.halfedges = this._delaunator.halfedges;\r\n    const hull = this.hull = this._delaunator.hull;\r\n    const triangles = this.triangles = this._delaunator.triangles;\r\n    const inedges = this.inedges.fill(-1);\r\n    const hullIndex = this._hullIndex.fill(-1);\r\n\r\n    // Compute an index from each point to an (arbitrary) incoming halfedge\r\n    // Used to give the first neighbor of each point; for this reason,\r\n    // on the hull we give priority to exterior halfedges\r\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\r\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\r\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\r\n    }\r\n    for (let i = 0, n = hull.length; i < n; ++i) {\r\n      hullIndex[hull[i]] = i;\r\n    }\r\n\r\n    // degenerate case: 1 or 2 (distinct) points\r\n    if (hull.length <= 2 && hull.length > 0) {\r\n      this.triangles = new Int32Array(3).fill(-1);\r\n      this.halfedges = new Int32Array(3).fill(-1);\r\n      this.triangles[0] = hull[0];\r\n      inedges[hull[0]] = 1;\r\n      if (hull.length === 2) {\r\n        inedges[hull[1]] = 0;\r\n        this.triangles[1] = hull[1];\r\n        this.triangles[2] = hull[1];\r\n      }\r\n    }\r\n  }\r\n  voronoi(bounds) {\r\n    return new Voronoi(this, bounds);\r\n  }\r\n  *neighbors(i) {\r\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\r\n\r\n    // degenerate case with several collinear points\r\n    if (collinear) {\r\n      const l = collinear.indexOf(i);\r\n      if (l > 0) yield collinear[l - 1];\r\n      if (l < collinear.length - 1) yield collinear[l + 1];\r\n      return;\r\n    }\r\n\r\n    const e0 = inedges[i];\r\n    if (e0 === -1) return; // coincident point\r\n    let e = e0, p0 = -1;\r\n    do {\r\n      yield p0 = triangles[e];\r\n      e = e % 3 === 2 ? e - 2 : e + 1;\r\n      if (triangles[e] !== i) return; // bad triangulation\r\n      e = halfedges[e];\r\n      if (e === -1) {\r\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\r\n        if (p !== p0) yield p;\r\n        return;\r\n      }\r\n    } while (e !== e0);\r\n  }\r\n  find(x, y, i = 0) {\r\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\r\n    const i0 = i;\r\n    let c;\r\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\r\n    return c;\r\n  }\r\n  _step(i, x, y) {\r\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\r\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\r\n    let c = i;\r\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\r\n    const e0 = inedges[i];\r\n    let e = e0;\r\n    do {\r\n      let t = triangles[e];\r\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\r\n      if (dt < dc) dc = dt, c = t;\r\n      e = e % 3 === 2 ? e - 2 : e + 1;\r\n      if (triangles[e] !== i) break; // bad triangulation\r\n      e = halfedges[e];\r\n      if (e === -1) {\r\n        e = hull[(_hullIndex[i] + 1) % hull.length];\r\n        if (e !== t) {\r\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\r\n        }\r\n        break;\r\n      }\r\n    } while (e !== e0);\r\n    return c;\r\n  }\r\n  render(context) {\r\n    const buffer = context == null ? context = new Path : undefined;\r\n    const {points, halfedges, triangles} = this;\r\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\r\n      const j = halfedges[i];\r\n      if (j < i) continue;\r\n      const ti = triangles[i] * 2;\r\n      const tj = triangles[j] * 2;\r\n      context.moveTo(points[ti], points[ti + 1]);\r\n      context.lineTo(points[tj], points[tj + 1]);\r\n    }\r\n    this.renderHull(context);\r\n    return buffer && buffer.value();\r\n  }\r\n  renderPoints(context, r) {\r\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\r\n    r = r == undefined ? 2 : +r;\r\n    const buffer = context == null ? context = new Path : undefined;\r\n    const {points} = this;\r\n    for (let i = 0, n = points.length; i < n; i += 2) {\r\n      const x = points[i], y = points[i + 1];\r\n      context.moveTo(x + r, y);\r\n      context.arc(x, y, r, 0, tau);\r\n    }\r\n    return buffer && buffer.value();\r\n  }\r\n  renderHull(context) {\r\n    const buffer = context == null ? context = new Path : undefined;\r\n    const {hull, points} = this;\r\n    const h = hull[0] * 2, n = hull.length;\r\n    context.moveTo(points[h], points[h + 1]);\r\n    for (let i = 1; i < n; ++i) {\r\n      const h = 2 * hull[i];\r\n      context.lineTo(points[h], points[h + 1]);\r\n    }\r\n    context.closePath();\r\n    return buffer && buffer.value();\r\n  }\r\n  hullPolygon() {\r\n    const polygon = new Polygon;\r\n    this.renderHull(polygon);\r\n    return polygon.value();\r\n  }\r\n  renderTriangle(i, context) {\r\n    const buffer = context == null ? context = new Path : undefined;\r\n    const {points, triangles} = this;\r\n    const t0 = triangles[i *= 3] * 2;\r\n    const t1 = triangles[i + 1] * 2;\r\n    const t2 = triangles[i + 2] * 2;\r\n    context.moveTo(points[t0], points[t0 + 1]);\r\n    context.lineTo(points[t1], points[t1 + 1]);\r\n    context.lineTo(points[t2], points[t2 + 1]);\r\n    context.closePath();\r\n    return buffer && buffer.value();\r\n  }\r\n  *trianglePolygons() {\r\n    const {triangles} = this;\r\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\r\n      yield this.trianglePolygon(i);\r\n    }\r\n  }\r\n  trianglePolygon(i) {\r\n    const polygon = new Polygon;\r\n    this.renderTriangle(i, polygon);\r\n    return polygon.value();\r\n  }\r\n}\r\n\r\nfunction flatArray(points, fx, fy, that) {\r\n  const n = points.length;\r\n  const array = new Float64Array(n * 2);\r\n  for (let i = 0; i < n; ++i) {\r\n    const p = points[i];\r\n    array[i * 2] = fx.call(that, p, i, points);\r\n    array[i * 2 + 1] = fy.call(that, p, i, points);\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction* flatIterable(points, fx, fy, that) {\r\n  let i = 0;\r\n  for (const p of points) {\r\n    yield fx.call(that, p, i, points);\r\n    yield fy.call(that, p, i, points);\r\n    ++i;\r\n  }\r\n}\r\n"],
  "mappings": ";;;AAAO,IAAM,UAAU;AAChB,IAAM,WAAW;AACjB,IAAM,iBAAkB,KAAI,IAAI,WAAW;AAG3C,aAAa,MAAM,GAAG,MAAM,GAAG,GAAG;AACrC,MAAI,GAAG,MAAM,IAAI;AACjB,MAAI,OAAO,EAAE;AACb,MAAI,OAAO,EAAE;AACb,MAAI,SAAS;AACb,MAAI,SAAS;AACb,MAAK,OAAO,SAAW,OAAO,CAAC,MAAO;AAClC,QAAI;AACJ,WAAO,EAAE,EAAE;AAAA,EACf,OAAO;AACH,QAAI;AACJ,WAAO,EAAE,EAAE;AAAA,EACf;AACA,MAAI,SAAS;AACb,MAAI,SAAS,QAAQ,SAAS,MAAM;AAChC,QAAK,OAAO,SAAW,OAAO,CAAC,MAAO;AAClC,aAAO,OAAO;AACd,WAAK,IAAK,QAAO;AACjB,aAAO,EAAE,EAAE;AAAA,IACf,OAAO;AACH,aAAO,OAAO;AACd,WAAK,IAAK,QAAO;AACjB,aAAO,EAAE,EAAE;AAAA,IACf;AACA,QAAI;AACJ,QAAI,OAAO,GAAG;AACV,QAAE,YAAY;AAAA,IAClB;AACA,WAAO,SAAS,QAAQ,SAAS,MAAM;AACnC,UAAK,OAAO,SAAW,OAAO,CAAC,MAAO;AAClC,eAAO,IAAI;AACX,gBAAQ,OAAO;AACf,aAAK,IAAK,QAAO,SAAU,QAAO;AAClC,eAAO,EAAE,EAAE;AAAA,MACf,OAAO;AACH,eAAO,IAAI;AACX,gBAAQ,OAAO;AACf,aAAK,IAAK,QAAO,SAAU,QAAO;AAClC,eAAO,EAAE,EAAE;AAAA,MACf;AACA,UAAI;AACJ,UAAI,OAAO,GAAG;AACV,UAAE,YAAY;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AACA,SAAO,SAAS,MAAM;AAClB,WAAO,IAAI;AACX,YAAQ,OAAO;AACf,SAAK,IAAK,QAAO,SAAU,QAAO;AAClC,WAAO,EAAE,EAAE;AACX,QAAI;AACJ,QAAI,OAAO,GAAG;AACV,QAAE,YAAY;AAAA,IAClB;AAAA,EACJ;AACA,SAAO,SAAS,MAAM;AAClB,WAAO,IAAI;AACX,YAAQ,OAAO;AACf,SAAK,IAAK,QAAO,SAAU,QAAO;AAClC,WAAO,EAAE,EAAE;AACX,QAAI;AACJ,QAAI,OAAO,GAAG;AACV,QAAE,YAAY;AAAA,IAClB;AAAA,EACJ;AACA,MAAI,MAAM,KAAK,WAAW,GAAG;AACzB,MAAE,YAAY;AAAA,EAClB;AACA,SAAO;AACX;AAsDO,kBAAkB,MAAM,GAAG;AAC9B,MAAI,IAAI,EAAE;AACV,WAAS,IAAI,GAAG,IAAI,MAAM;AAAK,SAAK,EAAE;AACtC,SAAO;AACX;AAEO,aAAa,GAAG;AACnB,SAAO,IAAI,aAAa,CAAC;AAC7B;;;ACvIA,IAAM,eAAgB,KAAI,KAAK,WAAW;AAC1C,IAAM,eAAgB,KAAI,KAAK,WAAW;AAC1C,IAAM,eAAgB,KAAI,KAAK,WAAW,UAAU;AAEpD,IAAM,IAAI,IAAI,CAAC;AACf,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,EAAE;AACjB,IAAM,IAAI,IAAI,EAAE;AAChB,IAAM,IAAI,IAAI,CAAC;AAEf,uBAAuB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,QAAQ;AACnD,MAAI,SAAS,SAAS,SAAS;AAC/B,MAAI,OAAO,GAAG,KAAK,KAAK,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAE9D,QAAM,MAAM,KAAK;AACjB,QAAM,MAAM,KAAK;AACjB,QAAM,MAAM,KAAK;AACjB,QAAM,MAAM,KAAK;AAEjB,OAAK,MAAM;AACX,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,MAAM;AACX,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,OAAK,KAAM,MAAK,SAAU,MAAK;AAC/B,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,QAAK,KAAK;AACV,UAAQ,MAAK;AACb,IAAE,KAAK,KAAM,OAAK,SAAU,MAAK;AACjC,IAAE,KAAK;AAEP,MAAI,MAAM,SAAS,GAAG,CAAC;AACvB,MAAI,WAAW,eAAe;AAC9B,MAAI,OAAO,YAAY,CAAC,OAAO,UAAU;AACrC,WAAO;AAAA,EACX;AAEA,UAAQ,KAAK;AACb,YAAU,KAAM,OAAM,SAAU,SAAQ;AACxC,UAAQ,KAAK;AACb,YAAU,KAAM,OAAM,SAAU,SAAQ;AACxC,UAAQ,KAAK;AACb,YAAU,KAAM,OAAM,SAAU,SAAQ;AACxC,UAAQ,KAAK;AACb,YAAU,KAAM,OAAM,SAAU,SAAQ;AAExC,MAAI,YAAY,KAAK,YAAY,KAAK,YAAY,KAAK,YAAY,GAAG;AAClE,WAAO;AAAA,EACX;AAEA,aAAW,eAAe,SAAS,iBAAiB,KAAK,IAAI,GAAG;AAChE,SAAQ,MAAM,UAAU,MAAM,UAAY,OAAM,UAAU,MAAM;AAChE,MAAI,OAAO,YAAY,CAAC,OAAO;AAAU,WAAO;AAEhD,OAAK,UAAU;AACf,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,UAAU;AACf,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,OAAK,KAAM,MAAK,SAAU,MAAK;AAC/B,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,QAAK,KAAK;AACV,UAAQ,MAAK;AACb,IAAE,KAAK,KAAM,OAAK,SAAU,MAAK;AACjC,IAAE,KAAK;AACP,QAAM,QAAQ,IAAI,GAAG,GAAG,GAAG,GAAG,EAAE;AAEhC,OAAK,MAAM;AACX,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,MAAM;AACX,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,MAAM;AACZ,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,OAAK,KAAM,MAAK,SAAU,MAAK;AAC/B,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,QAAK,KAAK;AACV,UAAQ,MAAK;AACb,IAAE,KAAK,KAAM,OAAK,SAAU,MAAK;AACjC,IAAE,KAAK;AACP,QAAM,QAAQ,IAAI,OAAO,IAAI,GAAG,GAAG,EAAE;AAErC,OAAK,UAAU;AACf,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,UAAU;AACf,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,MAAI,WAAW;AACf,QAAM,IAAK,KAAI;AACf,QAAM,UAAU;AAChB,OAAK,MAAM,MAAO,MAAK,MAAM,MAAM,MAAM,MAAM,MAAM;AACrD,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,OAAK,KAAM,MAAK,SAAU,MAAK;AAC/B,OAAK,KAAK;AACV,UAAQ,KAAK;AACb,IAAE,KAAK,KAAM,MAAK,SAAU,SAAQ;AACpC,QAAK,KAAK;AACV,UAAQ,MAAK;AACb,IAAE,KAAK,KAAM,OAAK,SAAU,MAAK;AACjC,IAAE,KAAK;AACP,QAAM,OAAO,IAAI,OAAO,IAAI,GAAG,GAAG,CAAC;AAEnC,SAAO,EAAE,OAAO;AACpB;AAEO,kBAAkB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7C,QAAM,UAAW,MAAK,MAAO,MAAK;AAClC,QAAM,WAAY,MAAK,MAAO,MAAK;AACnC,QAAM,MAAM,UAAU;AAEtB,MAAI,YAAY,KAAK,aAAa,KAAM,UAAU,MAAQ,WAAW;AAAI,WAAO;AAEhF,QAAM,SAAS,KAAK,IAAI,UAAU,QAAQ;AAC1C,MAAI,KAAK,IAAI,GAAG,KAAK,eAAe;AAAQ,WAAO;AAEnD,SAAO,CAAC,cAAc,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM;AACxD;;;ACnLA,IAAM,eAAgB,KAAI,KAAK,WAAW;AAC1C,IAAM,eAAgB,KAAI,KAAK,WAAW;AAC1C,IAAM,eAAgB,MAAK,MAAM,WAAW,UAAU;AAEtD,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,MAAM,IAAI,CAAC;AACjB,IAAM,MAAM,IAAI,CAAC;AACjB,IAAM,MAAM,IAAI,CAAC;AACjB,IAAM,KAAI,IAAI,CAAC;AAEf,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,MAAM,IAAI,CAAC;AACjB,IAAM,MAAM,IAAI,CAAC;AACjB,IAAM,MAAM,IAAI,EAAE;AAElB,IAAI,MAAM,IAAI,GAAG;AACjB,IAAI,OAAO,IAAI,GAAG;;;ACxBlB,IAAM,eAAgB,MAAK,KAAK,WAAW;AAC3C,IAAM,eAAgB,KAAI,KAAK,WAAW;AAC1C,IAAM,eAAgB,MAAK,MAAM,WAAW,UAAU;AAEtD,IAAM,MAAK,IAAI,CAAC;AAChB,IAAM,MAAK,IAAI,CAAC;AAChB,IAAM,MAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAI,IAAI,CAAC;AACf,IAAM,IAAI,IAAI,CAAC;AACf,IAAM,QAAQ,IAAI,CAAC;AACnB,IAAM,QAAQ,IAAI,CAAC;AACnB,IAAM,QAAQ,IAAI,CAAC;AACnB,IAAM,QAAQ,IAAI,CAAC;AACnB,IAAM,QAAQ,IAAI,CAAC;AACnB,IAAM,QAAQ,IAAI,CAAC;AACnB,IAAM,OAAM,IAAI,CAAC;AACjB,IAAM,OAAM,IAAI,CAAC;AACjB,IAAM,OAAM,IAAI,CAAC;AACjB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,OAAO,IAAI,CAAC;AAClB,IAAM,OAAO,IAAI,CAAC;AAElB,IAAM,MAAK,IAAI,CAAC;AAChB,IAAM,OAAM,IAAI,EAAE;AAClB,IAAM,OAAO,IAAI,EAAE;AACnB,IAAM,OAAO,IAAI,EAAE;AACnB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,OAAO,IAAI,EAAE;AACnB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAElB,IAAI,OAAM,IAAI,IAAI;AAClB,IAAI,QAAO,IAAI,IAAI;;;ACnCnB,IAAM,eAAgB,MAAK,MAAM,WAAW;AAC5C,IAAM,eAAgB,KAAI,KAAK,WAAW;AAC1C,IAAM,eAAgB,MAAK,OAAO,WAAW,UAAU;AAEvD,IAAM,MAAK,IAAI,CAAC;AAChB,IAAM,MAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAChB,IAAM,KAAK,IAAI,CAAC;AAEhB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAElB,IAAM,OAAO,IAAI,IAAI;AACrB,IAAM,OAAO,IAAI,IAAI;AACrB,IAAM,OAAO,IAAI,IAAI;AACrB,IAAM,OAAO,IAAI,IAAI;AACrB,IAAM,OAAO,IAAI,IAAI;AACrB,IAAM,QAAQ,IAAI,IAAI;AACtB,IAAM,QAAQ,IAAI,IAAI;AACtB,IAAM,SAAS,IAAI,IAAI;AACvB,IAAM,QAAQ,IAAI,IAAI;AAEtB,IAAM,MAAK,IAAI,CAAC;AAChB,IAAM,OAAM,IAAI,CAAC;AACjB,IAAM,MAAM,IAAI,CAAC;AACjB,IAAM,OAAM,IAAI,EAAE;AAClB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,OAAM,IAAI,EAAE;AAClB,IAAM,OAAO,IAAI,EAAE;AACnB,IAAM,MAAM,IAAI,EAAE;AAClB,IAAM,OAAO,IAAI,GAAG;AACpB,IAAM,QAAQ,IAAI,GAAG;AACrB,IAAM,QAAQ,IAAI,GAAG;AACrB,IAAM,QAAQ,IAAI,GAAG;AACrB,IAAM,OAAO,IAAI,GAAG;AAgVpB,IAAM,OAAO,IAAI,EAAE;AACnB,IAAM,OAAO,IAAI,EAAE;AACnB,IAAM,OAAO,IAAI,EAAE;AACnB,IAAM,OAAM,IAAI,IAAI;;;ACpYpB,IAAM,UAAU,KAAK,IAAI,GAAG,GAAG;AAC/B,IAAM,aAAa,IAAI,YAAY,GAAG;AAItC,IAAqB,aAArB,MAAgC;AAAA,EAE5B,OAAO,KAAK,QAAQ,OAAO,aAAa,OAAO,aAAa;AACxD,UAAM,IAAI,OAAO;AACjB,UAAM,SAAS,IAAI,aAAa,IAAI,CAAC;AAErC,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAM,IAAI,OAAO;AACjB,aAAO,IAAI,KAAK,KAAK,CAAC;AACtB,aAAO,IAAI,IAAI,KAAK,KAAK,CAAC;AAAA,IAC9B;AAEA,WAAO,IAAI,WAAW,MAAM;AAAA,EAChC;AAAA,EAEA,YAAY,QAAQ;AAChB,UAAM,IAAI,OAAO,UAAU;AAC3B,QAAI,IAAI,KAAK,OAAO,OAAO,OAAO;AAAU,YAAM,IAAI,MAAM,qCAAqC;AAEjG,SAAK,SAAS;AAGd,UAAM,eAAe,KAAK,IAAI,IAAI,IAAI,GAAG,CAAC;AAC1C,SAAK,aAAa,IAAI,YAAY,eAAe,CAAC;AAClD,SAAK,aAAa,IAAI,WAAW,eAAe,CAAC;AAGjD,SAAK,YAAY,KAAK,KAAK,KAAK,KAAK,CAAC,CAAC;AACvC,SAAK,YAAY,IAAI,YAAY,CAAC;AAClC,SAAK,YAAY,IAAI,YAAY,CAAC;AAClC,SAAK,WAAW,IAAI,YAAY,CAAC;AACjC,SAAK,YAAY,IAAI,WAAW,KAAK,SAAS,EAAE,KAAK,EAAE;AAGvD,SAAK,OAAO,IAAI,YAAY,CAAC;AAC7B,SAAK,SAAS,IAAI,aAAa,CAAC;AAEhC,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,SAAS;AACL,UAAM,EAAC,QAAQ,WAAW,UAAU,WAAW,UAAU,UAAU,SAAS,WAAW,aAAa;AACpG,UAAM,IAAI,OAAO,UAAU;AAG3B,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,OAAO;AAEX,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAM,IAAI,OAAO,IAAI;AACrB,YAAM,IAAI,OAAO,IAAI,IAAI;AACzB,UAAI,IAAI;AAAM,eAAO;AACrB,UAAI,IAAI;AAAM,eAAO;AACrB,UAAI,IAAI;AAAM,eAAO;AACrB,UAAI,IAAI;AAAM,eAAO;AACrB,WAAK,KAAK,KAAK;AAAA,IACnB;AACA,UAAM,KAAM,QAAO,QAAQ;AAC3B,UAAM,KAAM,QAAO,QAAQ;AAE3B,QAAI,UAAU;AACd,QAAI,IAAI,IAAI;AAGZ,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAM,IAAI,KAAK,IAAI,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE;AACvD,UAAI,IAAI,SAAS;AACb,aAAK;AACL,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,UAAM,MAAM,OAAO,IAAI;AACvB,UAAM,MAAM,OAAO,IAAI,KAAK;AAE5B,cAAU;AAGV,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,UAAI,MAAM;AAAI;AACd,YAAM,IAAI,KAAK,KAAK,KAAK,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE;AACzD,UAAI,IAAI,WAAW,IAAI,GAAG;AACtB,aAAK;AACL,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,QAAI,MAAM,OAAO,IAAI;AACrB,QAAI,MAAM,OAAO,IAAI,KAAK;AAE1B,QAAI,YAAY;AAGhB,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,UAAI,MAAM,MAAM,MAAM;AAAI;AAC1B,YAAM,IAAI,aAAa,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE;AAC3E,UAAI,IAAI,WAAW;AACf,aAAK;AACL,oBAAY;AAAA,MAChB;AAAA,IACJ;AACA,QAAI,MAAM,OAAO,IAAI;AACrB,QAAI,MAAM,OAAO,IAAI,KAAK;AAE1B,QAAI,cAAc,UAAU;AAGxB,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,aAAK,OAAO,KAAM,OAAO,IAAI,KAAK,OAAO,MAAQ,OAAO,IAAI,IAAI,KAAK,OAAO;AAAA,MAChF;AACA,gBAAU,KAAK,MAAM,KAAK,QAAQ,GAAG,IAAI,CAAC;AAC1C,YAAM,OAAO,IAAI,YAAY,CAAC;AAC9B,UAAI,IAAI;AACR,eAAS,IAAI,GAAG,KAAK,WAAW,IAAI,GAAG,KAAK;AACxC,cAAM,KAAK,KAAK,KAAK;AACrB,YAAI,KAAK,OAAO,MAAM,IAAI;AACtB,eAAK,OAAO;AACZ,eAAK,KAAK,OAAO;AAAA,QACrB;AAAA,MACJ;AACA,WAAK,OAAO,KAAK,SAAS,GAAG,CAAC;AAC9B,WAAK,YAAY,IAAI,YAAY,CAAC;AAClC,WAAK,YAAY,IAAI,YAAY,CAAC;AAClC;AAAA,IACJ;AAGA,QAAI,SAAS,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG,IAAI,GAAG;AAC5C,YAAM,IAAI;AACV,YAAM,IAAI;AACV,YAAM,IAAI;AACV,WAAK;AACL,YAAM;AACN,YAAM;AACN,WAAK;AACL,YAAM;AACN,YAAM;AAAA,IACV;AAEA,UAAM,SAAS,aAAa,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AACxD,SAAK,MAAM,OAAO;AAClB,SAAK,MAAM,OAAO;AAElB,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,WAAK,OAAO,KAAK,KAAK,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,GAAG,OAAO,CAAC;AAAA,IAC9E;AAGA,cAAU,KAAK,MAAM,KAAK,QAAQ,GAAG,IAAI,CAAC;AAG1C,SAAK,aAAa;AAClB,QAAI,WAAW;AAEf,aAAS,MAAM,SAAS,MAAM;AAC9B,aAAS,MAAM,SAAS,MAAM;AAC9B,aAAS,MAAM,SAAS,MAAM;AAE9B,YAAQ,MAAM;AACd,YAAQ,MAAM;AACd,YAAQ,MAAM;AAEd,aAAS,KAAK,EAAE;AAChB,aAAS,KAAK,SAAS,KAAK,GAAG,KAAK;AACpC,aAAS,KAAK,SAAS,KAAK,GAAG,KAAK;AACpC,aAAS,KAAK,SAAS,KAAK,GAAG,KAAK;AAEpC,SAAK,eAAe;AACpB,SAAK,aAAa,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AAExC,aAAS,IAAI,GAAG,IAAI,IAAI,IAAI,KAAK,KAAK,QAAQ,KAAK;AAC/C,YAAM,IAAI,KAAK,KAAK;AACpB,YAAM,IAAI,OAAO,IAAI;AACrB,YAAM,IAAI,OAAO,IAAI,IAAI;AAGzB,UAAI,IAAI,KAAK,KAAK,IAAI,IAAI,EAAE,KAAK,WAAW,KAAK,IAAI,IAAI,EAAE,KAAK;AAAS;AACzE,WAAK;AACL,WAAK;AAGL,UAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AAAI;AAGtC,UAAI,QAAQ;AACZ,eAAS,IAAI,GAAG,MAAM,KAAK,SAAS,GAAG,CAAC,GAAG,IAAI,KAAK,WAAW,KAAK;AAChE,gBAAQ,SAAU,OAAM,KAAK,KAAK;AAClC,YAAI,UAAU,MAAM,UAAU,SAAS;AAAQ;AAAA,MACnD;AAEA,cAAQ,SAAS;AACjB,UAAI,IAAI,OAAO;AACf,aAAO,IAAI,SAAS,IAAI,SAAS,GAAG,GAAG,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE,KAAK,GAAG;AAC7G,YAAI;AACJ,YAAI,MAAM,OAAO;AACb,cAAI;AACJ;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,MAAM;AAAI;AAGd,UAAI,IAAI,KAAK,aAAa,GAAG,GAAG,SAAS,IAAI,IAAI,IAAI,QAAQ,EAAE;AAG/D,cAAQ,KAAK,KAAK,UAAU,IAAI,CAAC;AACjC,cAAQ,KAAK;AACb;AAGA,UAAI,KAAI,SAAS;AACjB,aAAO,IAAI,SAAS,KAAI,SAAS,GAAG,GAAG,OAAO,IAAI,KAAI,OAAO,IAAI,KAAI,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE,IAAI,GAAG;AAC5G,YAAI,KAAK,aAAa,IAAG,GAAG,GAAG,QAAQ,IAAI,IAAI,QAAQ,GAAE;AACzD,gBAAQ,KAAK,KAAK,UAAU,IAAI,CAAC;AACjC,iBAAS,MAAK;AACd;AACA,aAAI;AAAA,MACR;AAGA,UAAI,MAAM,OAAO;AACb,eAAO,IAAI,SAAS,IAAI,SAAS,GAAG,GAAG,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE,IAAI,GAAG;AAC5G,cAAI,KAAK,aAAa,GAAG,GAAG,GAAG,IAAI,QAAQ,IAAI,QAAQ,EAAE;AACzD,eAAK,UAAU,IAAI,CAAC;AACpB,kBAAQ,KAAK;AACb,mBAAS,KAAK;AACd;AACA,cAAI;AAAA,QACR;AAAA,MACJ;AAGA,WAAK,aAAa,SAAS,KAAK;AAChC,eAAS,KAAK,SAAS,MAAK;AAC5B,eAAS,KAAK;AAGd,eAAS,KAAK,SAAS,GAAG,CAAC,KAAK;AAChC,eAAS,KAAK,SAAS,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAE,KAAK;AAAA,IAChE;AAEA,SAAK,OAAO,IAAI,YAAY,QAAQ;AACpC,aAAS,IAAI,GAAG,IAAI,KAAK,YAAY,IAAI,UAAU,KAAK;AACpD,WAAK,KAAK,KAAK;AACf,UAAI,SAAS;AAAA,IACjB;AAGA,SAAK,YAAY,KAAK,WAAW,SAAS,GAAG,KAAK,YAAY;AAC9D,SAAK,YAAY,KAAK,WAAW,SAAS,GAAG,KAAK,YAAY;AAAA,EAClE;AAAA,EAEA,SAAS,GAAG,GAAG;AACX,WAAO,KAAK,MAAM,YAAY,IAAI,KAAK,KAAK,IAAI,KAAK,GAAG,IAAI,KAAK,SAAS,IAAI,KAAK;AAAA,EACvF;AAAA,EAEA,UAAU,GAAG;AACT,UAAM,EAAC,YAAY,WAAW,YAAY,WAAW,WAAU;AAE/D,QAAI,IAAI;AACR,QAAI,KAAK;AAGT,WAAO,MAAM;AACT,YAAM,IAAI,UAAU;AAiBpB,YAAM,KAAK,IAAI,IAAI;AACnB,WAAK,KAAM,KAAI,KAAK;AAEpB,UAAI,MAAM,IAAI;AACV,YAAI,MAAM;AAAG;AACb,YAAI,WAAW,EAAE;AACjB;AAAA,MACJ;AAEA,YAAM,KAAK,IAAI,IAAI;AACnB,YAAM,KAAK,KAAM,KAAI,KAAK;AAC1B,YAAM,KAAK,KAAM,KAAI,KAAK;AAE1B,YAAM,KAAK,UAAU;AACrB,YAAM,KAAK,UAAU;AACrB,YAAM,KAAK,UAAU;AACrB,YAAM,KAAK,UAAU;AAErB,YAAM,UAAU,SACZ,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,IAChC,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,IAChC,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,IAChC,OAAO,IAAI,KAAK,OAAO,IAAI,KAAK,EAAE;AAEtC,UAAI,SAAS;AACT,kBAAU,KAAK;AACf,kBAAU,KAAK;AAEf,cAAM,MAAM,UAAU;AAGtB,YAAI,QAAQ,IAAI;AACZ,cAAI,IAAI,KAAK;AACb,aAAG;AACC,gBAAI,KAAK,SAAS,OAAO,IAAI;AACzB,mBAAK,SAAS,KAAK;AACnB;AAAA,YACJ;AACA,gBAAI,KAAK,UAAU;AAAA,UACvB,SAAS,MAAM,KAAK;AAAA,QACxB;AACA,aAAK,MAAM,GAAG,GAAG;AACjB,aAAK,MAAM,GAAG,UAAU,GAAG;AAC3B,aAAK,MAAM,IAAI,EAAE;AAEjB,cAAM,KAAK,KAAM,KAAI,KAAK;AAG1B,YAAI,IAAI,WAAW,QAAQ;AACvB,qBAAW,OAAO;AAAA,QACtB;AAAA,MACJ,OAAO;AACH,YAAI,MAAM;AAAG;AACb,YAAI,WAAW,EAAE;AAAA,MACrB;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA,EAEA,MAAM,GAAG,GAAG;AACR,SAAK,WAAW,KAAK;AACrB,QAAI,MAAM;AAAI,WAAK,WAAW,KAAK;AAAA,EACvC;AAAA,EAGA,aAAa,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG;AAC9B,UAAM,IAAI,KAAK;AAEf,SAAK,WAAW,KAAK;AACrB,SAAK,WAAW,IAAI,KAAK;AACzB,SAAK,WAAW,IAAI,KAAK;AAEzB,SAAK,MAAM,GAAG,CAAC;AACf,SAAK,MAAM,IAAI,GAAG,CAAC;AACnB,SAAK,MAAM,IAAI,GAAG,CAAC;AAEnB,SAAK,gBAAgB;AAErB,WAAO;AAAA,EACX;AACJ;AAGA,qBAAqB,IAAI,IAAI;AACzB,QAAM,IAAI,KAAM,MAAK,IAAI,EAAE,IAAI,KAAK,IAAI,EAAE;AAC1C,SAAQ,MAAK,IAAI,IAAI,IAAI,IAAI,KAAK;AACtC;AAEA,cAAc,IAAI,IAAI,IAAI,IAAI;AAC1B,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,SAAO,KAAK,KAAK,KAAK;AAC1B;AAEA,kBAAkB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC9C,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAEhB,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,KAAK,KAAK,KAAK,KAAK;AAE1B,SAAO,KAAM,MAAK,KAAK,KAAK,MACrB,KAAM,MAAK,KAAK,KAAK,MACrB,KAAM,MAAK,KAAK,KAAK,MAAM;AACtC;AAEA,sBAAsB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC1C,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAEhB,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,IAAI,MAAO,MAAK,KAAK,KAAK;AAEhC,QAAM,IAAK,MAAK,KAAK,KAAK,MAAM;AAChC,QAAM,IAAK,MAAK,KAAK,KAAK,MAAM;AAEhC,SAAO,IAAI,IAAI,IAAI;AACvB;AAEA,sBAAsB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC1C,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAChB,QAAM,KAAK,KAAK;AAEhB,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,QAAM,IAAI,MAAO,MAAK,KAAK,KAAK;AAEhC,QAAM,IAAI,KAAM,MAAK,KAAK,KAAK,MAAM;AACrC,QAAM,IAAI,KAAM,MAAK,KAAK,KAAK,MAAM;AAErC,SAAO,EAAC,GAAG,EAAC;AAChB;AAEA,mBAAmB,KAAK,OAAO,MAAM,OAAO;AACxC,MAAI,QAAQ,QAAQ,IAAI;AACpB,aAAS,IAAI,OAAO,GAAG,KAAK,OAAO,KAAK;AACpC,YAAM,OAAO,IAAI;AACjB,YAAM,WAAW,MAAM;AACvB,UAAI,IAAI,IAAI;AACZ,aAAO,KAAK,QAAQ,MAAM,IAAI,MAAM;AAAU,YAAI,IAAI,KAAK,IAAI;AAC/D,UAAI,IAAI,KAAK;AAAA,IACjB;AAAA,EACJ,OAAO;AACH,UAAM,SAAU,OAAO,SAAU;AACjC,QAAI,IAAI,OAAO;AACf,QAAI,IAAI;AACR,SAAK,KAAK,QAAQ,CAAC;AACnB,QAAI,MAAM,IAAI,SAAS,MAAM,IAAI;AAAS,WAAK,KAAK,MAAM,KAAK;AAC/D,QAAI,MAAM,IAAI,MAAM,MAAM,IAAI;AAAS,WAAK,KAAK,GAAG,KAAK;AACzD,QAAI,MAAM,IAAI,SAAS,MAAM,IAAI;AAAK,WAAK,KAAK,MAAM,CAAC;AAEvD,UAAM,OAAO,IAAI;AACjB,UAAM,WAAW,MAAM;AACvB,WAAO,MAAM;AACT;AAAG;AAAA,aAAY,MAAM,IAAI,MAAM;AAC/B;AAAG;AAAA,aAAY,MAAM,IAAI,MAAM;AAC/B,UAAI,IAAI;AAAG;AACX,WAAK,KAAK,GAAG,CAAC;AAAA,IAClB;AACA,QAAI,OAAO,KAAK,IAAI;AACpB,QAAI,KAAK;AAET,QAAI,QAAQ,IAAI,KAAK,IAAI,MAAM;AAC3B,gBAAU,KAAK,OAAO,GAAG,KAAK;AAC9B,gBAAU,KAAK,OAAO,MAAM,IAAI,CAAC;AAAA,IACrC,OAAO;AACH,gBAAU,KAAK,OAAO,MAAM,IAAI,CAAC;AACjC,gBAAU,KAAK,OAAO,GAAG,KAAK;AAAA,IAClC;AAAA,EACJ;AACJ;AAEA,cAAc,KAAK,GAAG,GAAG;AACrB,QAAM,MAAM,IAAI;AAChB,MAAI,KAAK,IAAI;AACb,MAAI,KAAK;AACb;AAEA,qBAAqB,GAAG;AACpB,SAAO,EAAE;AACb;AACA,qBAAqB,GAAG;AACpB,SAAO,EAAE;AACb;;;ACjeA,IAAM,WAAU;AAEhB,IAAqB,OAArB,MAA0B;AAAA,EACxB,cAAc;AACZ,SAAK,MAAM,KAAK,MAChB,KAAK,MAAM,KAAK,MAAM;AACtB,SAAK,IAAI;AAAA,EACX;AAAA,EACA,OAAO,GAAG,GAAG;AACX,SAAK,KAAK,IAAI,KAAK,MAAM,KAAK,MAAM,CAAC,KAAK,KAAK,MAAM,KAAK,MAAM,CAAC;AAAA,EACnE;AAAA,EACA,YAAY;AACV,QAAI,KAAK,QAAQ,MAAM;AACrB,WAAK,MAAM,KAAK,KAAK,KAAK,MAAM,KAAK;AACrC,WAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA,EACA,OAAO,GAAG,GAAG;AACX,SAAK,KAAK,IAAI,KAAK,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC;AAAA,EAC7C;AAAA,EACA,IAAI,GAAG,GAAG,GAAG;AACX,QAAI,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;AACrB,UAAM,KAAK,IAAI;AACf,UAAM,KAAK;AACX,QAAI,IAAI;AAAG,YAAM,IAAI,MAAM,iBAAiB;AAC5C,QAAI,KAAK,QAAQ;AAAM,WAAK,KAAK,IAAI,MAAM;AAAA,aAClC,KAAK,IAAI,KAAK,MAAM,EAAE,IAAI,YAAW,KAAK,IAAI,KAAK,MAAM,EAAE,IAAI;AAAS,WAAK,KAAK,MAAM,KAAK,MAAM;AAC5G,QAAI,CAAC;AAAG;AACR,SAAK,KAAK,IAAI,KAAK,WAAW,IAAI,KAAK,KAAK,KAAK,WAAW,KAAK,MAAM,MAAM,KAAK,MAAM;AAAA,EAC1F;AAAA,EACA,KAAK,GAAG,GAAG,GAAG,GAAG;AACf,SAAK,KAAK,IAAI,KAAK,MAAM,KAAK,MAAM,CAAC,KAAK,KAAK,MAAM,KAAK,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;AAAA,EACrF;AAAA,EACA,QAAQ;AACN,WAAO,KAAK,KAAK;AAAA,EACnB;AACF;;;ACpCA,IAAqB,UAArB,MAA6B;AAAA,EAC3B,cAAc;AACZ,SAAK,IAAI,CAAC;AAAA,EACZ;AAAA,EACA,OAAO,GAAG,GAAG;AACX,SAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AAAA,EACpB;AAAA,EACA,YAAY;AACV,SAAK,EAAE,KAAK,KAAK,EAAE,GAAG,MAAM,CAAC;AAAA,EAC/B;AAAA,EACA,OAAO,GAAG,GAAG;AACX,SAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;AAAA,EACpB;AAAA,EACA,QAAQ;AACN,WAAO,KAAK,EAAE,SAAS,KAAK,IAAI;AAAA,EAClC;AACF;;;ACbA,IAAqB,UAArB,MAA6B;AAAA,EAC3B,YAAY,UAAU,CAAC,MAAM,MAAM,MAAM,QAAQ,CAAC,GAAG,GAAG,KAAK,GAAG,GAAG;AACjE,QAAI,CAAG,SAAO,CAAC,SAAU,QAAO,CAAC,UAAU,CAAG,SAAO,CAAC,SAAU,QAAO,CAAC;AAAQ,YAAM,IAAI,MAAM,gBAAgB;AAChH,SAAK,WAAW;AAChB,SAAK,iBAAiB,IAAI,aAAa,SAAS,OAAO,SAAS,CAAC;AACjE,SAAK,UAAU,IAAI,aAAa,SAAS,OAAO,SAAS,CAAC;AAC1D,SAAK,OAAO,MAAM,KAAK,OAAO;AAC9B,SAAK,OAAO,MAAM,KAAK,OAAO;AAC9B,SAAK,MAAM;AAAA,EACb;AAAA,EACA,SAAS;AACP,SAAK,SAAS,OAAO;AACrB,SAAK,MAAM;AACX,WAAO;AAAA,EACT;AAAA,EACA,QAAQ;AACN,UAAM,EAAC,UAAU,EAAC,QAAQ,MAAM,aAAY,YAAW;AAGvD,UAAM,gBAAgB,KAAK,gBAAgB,KAAK,eAAe,SAAS,GAAG,UAAU,SAAS,IAAI,CAAC;AACnG,aAAS,IAAI,GAAG,IAAI,GAAG,IAAI,UAAU,QAAQ,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG;AACxE,YAAM,KAAK,UAAU,KAAK;AAC1B,YAAM,KAAK,UAAU,IAAI,KAAK;AAC9B,YAAM,KAAK,UAAU,IAAI,KAAK;AAC9B,YAAM,MAAK,OAAO;AAClB,YAAM,MAAK,OAAO,KAAK;AACvB,YAAM,KAAK,OAAO;AAClB,YAAM,KAAK,OAAO,KAAK;AACvB,YAAM,KAAK,OAAO;AAClB,YAAM,KAAK,OAAO,KAAK;AAEvB,YAAM,KAAK,KAAK;AAChB,YAAM,KAAK,KAAK;AAChB,YAAM,KAAK,KAAK;AAChB,YAAM,KAAK,KAAK;AAChB,YAAM,MAAM,MAAK,KAAK,KAAK,MAAM;AAEjC,UAAI,KAAK,IAAI,GAAE,IAAI,MAAM;AAMvB,YAAI,IAAI;AAIR,cAAM,IAAI,UAAU,KAAK;AACzB,aAAK,KAAK,KAAM,QAAO,KAAK,OAAM,KAAM,QAAO,IAAI,KAAK,OAAM,EAAE;AAChE,YAAK,OAAK,MAAM,IAAI,IAAI;AACxB,YAAK,OAAK,MAAM,IAAI,IAAI;AAAA,MAC1B,OAAO;AACL,cAAM,IAAI,IAAI;AACd,cAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,cAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,YAAI,MAAM,MAAK,KAAK,KAAK,MAAM;AAC/B,YAAI,MAAM,MAAK,KAAK,KAAK,MAAM;AAAA,MACjC;AACA,oBAAc,KAAK;AACnB,oBAAc,IAAI,KAAK;AAAA,IACzB;AAGA,QAAI,IAAI,KAAK,KAAK,SAAS;AAC3B,QAAI,IAAI,KAAK,IAAI;AACjB,QAAI,IAAI,KAAK,OAAO,IAAI;AACxB,QAAI,IAAI,KAAK,OAAO,IAAI,IAAI;AAC5B,YAAQ,KAAK,CAAC;AACd,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,UAAI,KAAK;AACT,WAAK,IAAI,KAAK,IAAI,KAAK;AACvB,WAAK,IAAI,GAAG,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI,IAAI;AACpD,cAAQ,KAAK,KAAK,QAAQ,MAAM,KAAK;AACrC,cAAQ,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK;AAAA,IAC3C;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,UAAM,SAAS,WAAW,OAAO,UAAU,IAAI,SAAO;AACtD,UAAM,EAAC,UAAU,EAAC,WAAW,SAAS,QAAO,eAAe,YAAW;AACvE,QAAI,KAAK,UAAU;AAAG,aAAO;AAC7B,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,EAAE,GAAG;AAChD,YAAM,IAAI,UAAU;AACpB,UAAI,IAAI;AAAG;AACX,YAAM,KAAK,KAAK,MAAM,IAAI,CAAC,IAAI;AAC/B,YAAM,KAAK,KAAK,MAAM,IAAI,CAAC,IAAI;AAC/B,YAAM,KAAK,cAAc;AACzB,YAAM,KAAK,cAAc,KAAK;AAC9B,YAAM,KAAK,cAAc;AACzB,YAAM,KAAK,cAAc,KAAK;AAC9B,WAAK,eAAe,IAAI,IAAI,IAAI,IAAI,OAAO;AAAA,IAC7C;AACA,QAAI,IAAI,KAAK,KAAK,KAAK,SAAS;AAChC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,WAAK,IAAI,KAAK,KAAK;AACnB,YAAM,IAAI,KAAK,MAAM,QAAQ,MAAM,CAAC,IAAI;AACxC,YAAM,IAAI,cAAc;AACxB,YAAM,IAAI,cAAc,IAAI;AAC5B,YAAM,KAAI,KAAK;AACf,YAAM,IAAI,KAAK,SAAS,GAAG,GAAG,QAAQ,KAAI,IAAI,QAAQ,KAAI,EAAE;AAC5D,UAAI;AAAG,aAAK,eAAe,GAAG,GAAG,EAAE,IAAI,EAAE,IAAI,OAAO;AAAA,IACtD;AACA,WAAO,UAAU,OAAO,MAAM;AAAA,EAChC;AAAA,EACA,aAAa,SAAS;AACpB,UAAM,SAAS,WAAW,OAAO,UAAU,IAAI,SAAO;AACtD,YAAQ,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,OAAO,KAAK,MAAM,KAAK,OAAO,KAAK,IAAI;AAC/E,WAAO,UAAU,OAAO,MAAM;AAAA,EAChC;AAAA,EACA,WAAW,GAAG,SAAS;AACrB,UAAM,SAAS,WAAW,OAAO,UAAU,IAAI,SAAO;AACtD,UAAM,SAAS,KAAK,MAAM,CAAC;AAC3B,QAAI,WAAW,QAAQ,CAAC,OAAO;AAAQ;AACvC,YAAQ,OAAO,OAAO,IAAI,OAAO,EAAE;AACnC,QAAI,IAAI,OAAO;AACf,WAAO,OAAO,OAAO,OAAO,IAAE,MAAM,OAAO,OAAO,OAAO,IAAE,MAAM,IAAI;AAAG,WAAK;AAC7E,aAAS,KAAI,GAAG,KAAI,GAAG,MAAK,GAAG;AAC7B,UAAI,OAAO,QAAO,OAAO,KAAE,MAAM,OAAO,KAAE,OAAO,OAAO,KAAE;AACxD,gBAAQ,OAAO,OAAO,KAAI,OAAO,KAAI,EAAE;AAAA,IAC3C;AACA,YAAQ,UAAU;AAClB,WAAO,UAAU,OAAO,MAAM;AAAA,EAChC;AAAA,EACA,CAAC,eAAe;AACd,UAAM,EAAC,UAAU,EAAC,aAAW;AAC7B,aAAS,IAAI,GAAG,IAAI,OAAO,SAAS,GAAG,IAAI,GAAG,EAAE,GAAG;AACjD,YAAM,OAAO,KAAK,YAAY,CAAC;AAC/B,UAAI;AAAM,aAAK,QAAQ,GAAG,MAAM;AAAA,IAClC;AAAA,EACF;AAAA,EACA,YAAY,GAAG;AACb,UAAM,UAAU,IAAI;AACpB,SAAK,WAAW,GAAG,OAAO;AAC1B,WAAO,QAAQ,MAAM;AAAA,EACvB;AAAA,EACA,eAAe,IAAI,IAAI,IAAI,IAAI,SAAS;AACtC,QAAI;AACJ,UAAM,KAAK,KAAK,YAAY,IAAI,EAAE;AAClC,UAAM,KAAK,KAAK,YAAY,IAAI,EAAE;AAClC,QAAI,OAAO,KAAK,OAAO,GAAG;AACxB,cAAQ,OAAO,IAAI,EAAE;AACrB,cAAQ,OAAO,IAAI,EAAE;AAAA,IACvB,WAAW,IAAI,KAAK,aAAa,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG;AACxD,cAAQ,OAAO,EAAE,IAAI,EAAE,EAAE;AACzB,cAAQ,OAAO,EAAE,IAAI,EAAE,EAAE;AAAA,IAC3B;AAAA,EACF;AAAA,EACA,SAAS,GAAG,GAAG,GAAG;AAChB,QAAK,KAAI,CAAC,GAAG,MAAM,MAAO,KAAI,CAAC,GAAG,MAAM;AAAI,aAAO;AACnD,WAAO,KAAK,SAAS,MAAM,GAAG,GAAG,CAAC,MAAM;AAAA,EAC1C;AAAA,EACA,CAAC,UAAU,GAAG;AACZ,UAAM,KAAK,KAAK,MAAM,CAAC;AACvB,QAAI;AAAI,iBAAW,KAAK,KAAK,SAAS,UAAU,CAAC,GAAG;AAClD,cAAM,KAAK,KAAK,MAAM,CAAC;AAEvB,YAAI;AAAI;AAAM,qBAAS,KAAK,GAAG,KAAK,GAAG,QAAQ,KAAK,IAAI,MAAM,GAAG;AAC/D,uBAAS,KAAK,GAAG,KAAK,GAAG,QAAQ,KAAK,IAAI,MAAM,GAAG;AACjD,oBAAI,GAAG,OAAO,GAAG,OACd,GAAG,KAAK,MAAM,GAAG,KAAK,MACtB,GAAI,MAAK,KAAK,OAAO,GAAI,MAAK,KAAK,KAAK,OACxC,GAAI,MAAK,KAAK,OAAO,GAAI,MAAK,KAAK,KAAK,KACzC;AACA,wBAAM;AACN;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,MACF;AAAA,EACF;AAAA,EACA,MAAM,GAAG;AACP,UAAM,EAAC,eAAe,UAAU,EAAC,SAAS,WAAW,gBAAc;AACnE,UAAM,KAAK,QAAQ;AACnB,QAAI,OAAO;AAAI,aAAO;AACtB,UAAM,SAAS,CAAC;AAChB,QAAI,IAAI;AACR,OAAG;AACD,YAAM,IAAI,KAAK,MAAM,IAAI,CAAC;AAC1B,aAAO,KAAK,cAAc,IAAI,IAAI,cAAc,IAAI,IAAI,EAAE;AAC1D,UAAI,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC9B,UAAI,UAAU,OAAO;AAAG;AACxB,UAAI,UAAU;AAAA,IAChB,SAAS,MAAM,MAAM,MAAM;AAC3B,WAAO;AAAA,EACT;AAAA,EACA,MAAM,GAAG;AAEP,QAAI,MAAM,KAAK,KAAK,SAAS,KAAK,WAAW,GAAG;AAC9C,aAAO,CAAC,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI;AAAA,IAChG;AACA,UAAM,SAAS,KAAK,MAAM,CAAC;AAC3B,QAAI,WAAW;AAAM,aAAO;AAC5B,UAAM,EAAC,SAAS,MAAK;AACrB,UAAM,KAAI,IAAI;AACd,WAAO,EAAE,OAAM,EAAE,KAAI,KACf,KAAK,cAAc,GAAG,QAAQ,EAAE,KAAI,EAAE,KAAI,IAAI,EAAE,KAAI,IAAI,EAAE,KAAI,EAAE,IAChE,KAAK,YAAY,GAAG,MAAM;AAAA,EAClC;AAAA,EACA,YAAY,GAAG,QAAQ;AACrB,UAAM,IAAI,OAAO;AACjB,QAAI,IAAI;AACR,QAAI,IAAI,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI;AAChD,QAAI,IAAI,KAAK,KAAK,YAAY,IAAI,EAAE;AACpC,QAAI,IAAI,KAAK;AACb,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG;AAC7B,WAAK,IAAI,KAAK,IAAI,KAAK,OAAO,IAAI,KAAK,OAAO,IAAI;AAClD,WAAK,IAAI,KAAK,KAAK,YAAY,IAAI,EAAE;AACrC,UAAI,OAAO,KAAK,OAAO,GAAG;AACxB,aAAK,IAAI,KAAK;AACd,YAAI;AAAG,YAAE,KAAK,IAAI,EAAE;AAAA;AACf,cAAI,CAAC,IAAI,EAAE;AAAA,MAClB,OAAO;AACL,YAAI,GAAG,KAAK,KAAK,KAAK;AACtB,YAAI,OAAO,GAAG;AACZ,cAAK,KAAI,KAAK,aAAa,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,OAAO;AAAM;AAC9D,WAAC,KAAK,KAAK,KAAK,GAAG,IAAI;AAAA,QACzB,OAAO;AACL,cAAK,KAAI,KAAK,aAAa,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,OAAO;AAAM;AAC9D,WAAC,KAAK,KAAK,KAAK,GAAG,IAAI;AACvB,eAAK,IAAI,KAAK,KAAK,UAAU,KAAK,GAAG;AACrC,cAAI,MAAM;AAAI,iBAAK,MAAM,GAAG,IAAI,IAAI,GAAG,EAAE,MAAM;AAC/C,cAAI;AAAG,cAAE,KAAK,KAAK,GAAG;AAAA;AACjB,gBAAI,CAAC,KAAK,GAAG;AAAA,QACpB;AACA,aAAK,IAAI,KAAK,KAAK,UAAU,KAAK,GAAG;AACrC,YAAI,MAAM;AAAI,eAAK,MAAM,GAAG,IAAI,IAAI,GAAG,EAAE,MAAM;AAC/C,YAAI;AAAG,YAAE,KAAK,KAAK,GAAG;AAAA;AACjB,cAAI,CAAC,KAAK,GAAG;AAAA,MACpB;AAAA,IACF;AACA,QAAI,GAAG;AACL,WAAK,IAAI,KAAK,KAAK,UAAU,EAAE,IAAI,EAAE,EAAE;AACvC,UAAI,MAAM;AAAI,aAAK,MAAM,GAAG,IAAI,IAAI,GAAG,EAAE,MAAM;AAAA,IACjD,WAAW,KAAK,SAAS,GAAI,MAAK,OAAO,KAAK,QAAQ,GAAI,MAAK,OAAO,KAAK,QAAQ,CAAC,GAAG;AACrF,aAAO,CAAC,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI;AAAA,IAChG;AACA,WAAO;AAAA,EACT;AAAA,EACA,aAAa,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACnC,WAAO,MAAM;AACX,UAAI,OAAO,KAAK,OAAO;AAAG,eAAO,CAAC,IAAI,IAAI,IAAI,EAAE;AAChD,UAAI,KAAK;AAAI,eAAO;AACpB,UAAI,GAAG,GAAG,IAAI,MAAM;AACpB,UAAI,IAAI;AAAQ,YAAI,KAAM,MAAK,MAAO,MAAK,OAAO,MAAO,MAAK,KAAK,IAAI,KAAK;AAAA,eACnE,IAAI;AAAQ,YAAI,KAAM,MAAK,MAAO,MAAK,OAAO,MAAO,MAAK,KAAK,IAAI,KAAK;AAAA,eACxE,IAAI;AAAQ,YAAI,KAAM,MAAK,MAAO,MAAK,OAAO,MAAO,MAAK,KAAK,IAAI,KAAK;AAAA;AAC5E,YAAI,KAAM,MAAK,MAAO,MAAK,OAAO,MAAO,MAAK,KAAK,IAAI,KAAK;AACjE,UAAI;AAAI,aAAK,GAAG,KAAK,GAAG,KAAK,KAAK,YAAY,IAAI,EAAE;AAAA;AAC/C,aAAK,GAAG,KAAK,GAAG,KAAK,KAAK,YAAY,IAAI,EAAE;AAAA,IACnD;AAAA,EACF;AAAA,EACA,cAAc,GAAG,QAAQ,KAAK,KAAK,KAAK,KAAK;AAC3C,QAAI,IAAI,MAAM,KAAK,MAAM,GAAG;AAC5B,QAAI,IAAI,KAAK,SAAS,EAAE,IAAI,EAAE,IAAI,KAAK,GAAG;AAAG,QAAE,QAAQ,EAAE,IAAI,EAAE,EAAE;AACjE,QAAI,IAAI,KAAK,SAAS,EAAE,EAAE,SAAS,IAAI,EAAE,EAAE,SAAS,IAAI,KAAK,GAAG;AAAG,QAAE,KAAK,EAAE,IAAI,EAAE,EAAE;AACpF,QAAI,IAAI,KAAK,YAAY,GAAG,CAAC,GAAG;AAC9B,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,IAAI,KAAK,KAAK,UAAU,EAAE,IAAI,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,GAAG,KAAK,GAAG;AACxF,aAAK,IAAI,KAAK,KAAK,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE;AAC3C,YAAI,MAAM;AAAI,cAAI,KAAK,MAAM,GAAG,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,EAAE;AAAA,MACvD;AAAA,IACF,WAAW,KAAK,SAAS,GAAI,MAAK,OAAO,KAAK,QAAQ,GAAI,MAAK,OAAO,KAAK,QAAQ,CAAC,GAAG;AACrF,UAAI,CAAC,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI;AAAA,IAC7F;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,GAAG,IAAI,IAAI,GAAG,GAAG;AACrB,WAAO,OAAO,IAAI;AAChB,UAAI,GAAG;AACP,cAAQ;AAAA,aACD;AAAQ,eAAK;AAAQ;AAAA,aACrB;AAAQ,eAAK,GAAQ,IAAI,KAAK,MAAM,IAAI,KAAK;AAAM;AAAA,aACnD;AAAQ,eAAK;AAAQ;AAAA,aACrB;AAAQ,eAAK,IAAQ,IAAI,KAAK,MAAM,IAAI,KAAK;AAAM;AAAA,aACnD;AAAQ,eAAK;AAAQ;AAAA,aACrB;AAAQ,eAAK,GAAQ,IAAI,KAAK,MAAM,IAAI,KAAK;AAAM;AAAA,aACnD;AAAQ,eAAK;AAAQ;AAAA,aACrB;AAAQ,eAAK,GAAQ,IAAI,KAAK,MAAM,IAAI,KAAK;AAAM;AAAA;AAI1D,UAAK,GAAE,OAAO,KAAK,EAAE,IAAI,OAAO,MAAM,KAAK,SAAS,GAAG,GAAG,CAAC,GAAG;AAC5D,UAAE,OAAO,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK;AAAA,MAC7B;AAAA,IACF;AACA,QAAI,EAAE,SAAS,GAAG;AAChB,eAAS,KAAI,GAAG,KAAI,EAAE,QAAQ,MAAI,GAAG;AACnC,cAAM,KAAK,MAAI,KAAK,EAAE,QAAQ,IAAK,MAAI,KAAK,EAAE;AAC9C,YAAI,EAAE,QAAO,EAAE,OAAM,EAAE,QAAO,EAAE,MAC7B,EAAE,KAAI,OAAO,EAAE,KAAI,MAAM,EAAE,KAAI,OAAO,EAAE,IAAI;AAC7C,YAAE,OAAO,IAAG,CAAC,GAAG,MAAK;AAAA,MACzB;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,IAAI,IAAI,IAAI,IAAI;AACvB,QAAI,IAAI,UAAU,GAAG,GAAG;AACxB,QAAI,KAAK,GAAG;AACV,UAAI,MAAM,KAAK;AAAM,eAAO;AAC5B,UAAK,KAAK,MAAK,OAAO,MAAM,MAAM;AAAG,YAAI,KAAK,MAAM,IAAI,KAAM,KAAI,KAAK;AAAA,IACzE,WAAW,KAAK,GAAG;AACjB,UAAI,MAAM,KAAK;AAAM,eAAO;AAC5B,UAAK,KAAK,MAAK,OAAO,MAAM,MAAM;AAAG,YAAI,KAAK,MAAM,IAAI,KAAM,KAAI,KAAK;AAAA,IACzE;AACA,QAAI,KAAK,GAAG;AACV,UAAI,MAAM,KAAK;AAAM,eAAO;AAC5B,UAAK,KAAK,MAAK,OAAO,MAAM,MAAM;AAAG,YAAI,KAAK,MAAM,IAAI,KAAM,KAAI,KAAK;AAAA,IACzE,WAAW,KAAK,GAAG;AACjB,UAAI,MAAM,KAAK;AAAM,eAAO;AAC5B,UAAK,KAAK,MAAK,OAAO,MAAM,MAAM;AAAG,YAAI,KAAK,MAAM,IAAI,KAAM,KAAI,KAAK;AAAA,IACzE;AACA,WAAO,CAAC,GAAG,CAAC;AAAA,EACd;AAAA,EACA,UAAU,GAAG,GAAG;AACd,WAAQ,OAAM,KAAK,OAAO,IACpB,MAAM,KAAK,OAAO,IAAS,KAC1B,OAAM,KAAK,OAAO,IACnB,MAAM,KAAK,OAAO,IAAS;AAAA,EACnC;AAAA,EACA,YAAY,GAAG,GAAG;AAChB,WAAQ,KAAI,KAAK,OAAO,IAClB,IAAI,KAAK,OAAO,IAAS,KACxB,KAAI,KAAK,OAAO,IACjB,IAAI,KAAK,OAAO,IAAS;AAAA,EACjC;AACF;;;ACjUA,IAAM,MAAM,IAAI,KAAK;AAArB,IAAyB,MAAM,KAAK;AAEpC,gBAAgB,GAAG;AACjB,SAAO,EAAE;AACX;AAEA,gBAAgB,GAAG;AACjB,SAAO,EAAE;AACX;AAGA,mBAAmB,GAAG;AACpB,QAAM,EAAC,WAAW,WAAU;AAC5B,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,GAAG;AAC5C,UAAM,IAAI,IAAI,UAAU,IAClB,IAAI,IAAI,UAAU,IAAI,IACtB,IAAI,IAAI,UAAU,IAAI,IACtB,QAAS,QAAO,KAAK,OAAO,MAAO,QAAO,IAAI,KAAK,OAAO,IAAI,MACrD,QAAO,KAAK,OAAO,MAAO,QAAO,IAAI,KAAK,OAAO,IAAI;AACpE,QAAI,QAAQ;AAAO,aAAO;AAAA,EAC5B;AACA,SAAO;AACT;AAEA,gBAAgB,GAAG,GAAG,GAAG;AACvB,SAAO,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC;AAC1D;AAEA,IAAqB,WAArB,MAA8B;AAAA,EAC5B,OAAO,KAAK,QAAQ,KAAK,QAAQ,KAAK,QAAQ,MAAM;AAClD,WAAO,IAAI,SAAS,YAAY,SAC1B,UAAU,QAAQ,IAAI,IAAI,IAAI,IAC9B,aAAa,KAAK,aAAa,QAAQ,IAAI,IAAI,IAAI,CAAC,CAAC;AAAA,EAC7D;AAAA,EACA,YAAY,QAAQ;AAClB,SAAK,cAAc,IAAI,WAAW,MAAM;AACxC,SAAK,UAAU,IAAI,WAAW,OAAO,SAAS,CAAC;AAC/C,SAAK,aAAa,IAAI,WAAW,OAAO,SAAS,CAAC;AAClD,SAAK,SAAS,KAAK,YAAY;AAC/B,SAAK,MAAM;AAAA,EACb;AAAA,EACA,SAAS;AACP,SAAK,YAAY,OAAO;AACxB,SAAK,MAAM;AACX,WAAO;AAAA,EACT;AAAA,EACA,QAAQ;AACN,UAAM,IAAI,KAAK,aAAa,SAAS,KAAK;AAG1C,QAAI,EAAE,QAAQ,EAAE,KAAK,SAAS,KAAK,UAAU,CAAC,GAAG;AAC/C,WAAK,YAAY,WAAW,KAAK,EAAC,QAAQ,OAAO,SAAO,EAAC,GAAG,CAAC,GAAE,MAAM,CAAC,EACnE,KAAK,CAAC,GAAG,MAAM,OAAO,IAAI,KAAK,OAAO,IAAI,MAAM,OAAO,IAAI,IAAI,KAAK,OAAO,IAAI,IAAI,EAAE;AACxF,YAAM,IAAI,KAAK,UAAU,IAAI,IAAI,KAAK,UAAU,KAAK,UAAU,SAAS,IACtE,SAAS,CAAE,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,EAAG,GAC9E,IAAI,OAAO,KAAK,MAAM,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,OAAO,EAAE;AACpE,eAAS,IAAI,GAAG,IAAI,OAAO,SAAS,GAAG,IAAI,GAAG,EAAE,GAAG;AACjD,cAAM,IAAI,OAAO,OAAO,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC;AACpD,eAAO,IAAI,KAAK,EAAE;AAClB,eAAO,IAAI,IAAI,KAAK,EAAE;AAAA,MACxB;AACA,WAAK,cAAc,IAAI,WAAW,MAAM;AAAA,IAC1C,OAAO;AACL,aAAO,KAAK;AAAA,IACd;AAEA,UAAM,YAAY,KAAK,YAAY,KAAK,YAAY;AACpD,UAAM,OAAO,KAAK,OAAO,KAAK,YAAY;AAC1C,UAAM,YAAY,KAAK,YAAY,KAAK,YAAY;AACpD,UAAM,UAAU,KAAK,QAAQ,KAAK,EAAE;AACpC,UAAM,YAAY,KAAK,WAAW,KAAK,EAAE;AAKzC,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,EAAE,GAAG;AAChD,YAAM,IAAI,UAAU,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC9C,UAAI,UAAU,OAAO,MAAM,QAAQ,OAAO;AAAI,gBAAQ,KAAK;AAAA,IAC7D;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,EAAE,GAAG;AAC3C,gBAAU,KAAK,MAAM;AAAA,IACvB;AAGA,QAAI,KAAK,UAAU,KAAK,KAAK,SAAS,GAAG;AACvC,WAAK,YAAY,IAAI,WAAW,CAAC,EAAE,KAAK,EAAE;AAC1C,WAAK,YAAY,IAAI,WAAW,CAAC,EAAE,KAAK,EAAE;AAC1C,WAAK,UAAU,KAAK,KAAK;AACzB,cAAQ,KAAK,MAAM;AACnB,UAAI,KAAK,WAAW,GAAG;AACrB,gBAAQ,KAAK,MAAM;AACnB,aAAK,UAAU,KAAK,KAAK;AACzB,aAAK,UAAU,KAAK,KAAK;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ,QAAQ;AACd,WAAO,IAAI,QAAQ,MAAM,MAAM;AAAA,EACjC;AAAA,EACA,CAAC,UAAU,GAAG;AACZ,UAAM,EAAC,SAAS,MAAM,YAAY,WAAW,WAAW,0BAAa;AAGrE,QAAI,YAAW;AACb,YAAM,IAAI,WAAU,QAAQ,CAAC;AAC7B,UAAI,IAAI;AAAG,cAAM,WAAU,IAAI;AAC/B,UAAI,IAAI,WAAU,SAAS;AAAG,cAAM,WAAU,IAAI;AAClD;AAAA,IACF;AAEA,UAAM,KAAK,QAAQ;AACnB,QAAI,OAAO;AAAI;AACf,QAAI,IAAI,IAAI,KAAK;AACjB,OAAG;AACD,YAAM,KAAK,UAAU;AACrB,UAAI,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC9B,UAAI,UAAU,OAAO;AAAG;AACxB,UAAI,UAAU;AACd,UAAI,MAAM,IAAI;AACZ,cAAM,IAAI,KAAM,YAAW,KAAK,KAAK,KAAK;AAC1C,YAAI,MAAM;AAAI,gBAAM;AACpB;AAAA,MACF;AAAA,IACF,SAAS,MAAM;AAAA,EACjB;AAAA,EACA,KAAK,GAAG,GAAG,IAAI,GAAG;AAChB,QAAK,KAAI,CAAC,GAAG,MAAM,MAAO,KAAI,CAAC,GAAG,MAAM;AAAI,aAAO;AACnD,UAAM,KAAK;AACX,QAAI;AACJ,WAAQ,KAAI,KAAK,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,MAAM,KAAK,MAAM;AAAI,UAAI;AAClE,WAAO;AAAA,EACT;AAAA,EACA,MAAM,GAAG,GAAG,GAAG;AACb,UAAM,EAAC,SAAS,MAAM,YAAY,WAAW,WAAW,WAAU;AAClE,QAAI,QAAQ,OAAO,MAAM,CAAC,OAAO;AAAQ,aAAQ,KAAI,KAAM,QAAO,UAAU;AAC5E,QAAI,IAAI;AACR,QAAI,KAAK,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC;AACjE,UAAM,KAAK,QAAQ;AACnB,QAAI,IAAI;AACR,OAAG;AACD,UAAI,IAAI,UAAU;AAClB,YAAM,KAAK,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC;AACnE,UAAI,KAAK;AAAI,aAAK,IAAI,IAAI;AAC1B,UAAI,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI;AAC9B,UAAI,UAAU,OAAO;AAAG;AACxB,UAAI,UAAU;AACd,UAAI,MAAM,IAAI;AACZ,YAAI,KAAM,YAAW,KAAK,KAAK,KAAK;AACpC,YAAI,MAAM,GAAG;AACX,cAAI,IAAI,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI;AAAI,mBAAO;AAAA,QAC7E;AACA;AAAA,MACF;AAAA,IACF,SAAS,MAAM;AACf,WAAO;AAAA,EACT;AAAA,EACA,OAAO,SAAS;AACd,UAAM,SAAS,WAAW,OAAO,UAAU,IAAI,SAAO;AACtD,UAAM,EAAC,QAAQ,WAAW,cAAa;AACvC,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,EAAE,GAAG;AAChD,YAAM,IAAI,UAAU;AACpB,UAAI,IAAI;AAAG;AACX,YAAM,KAAK,UAAU,KAAK;AAC1B,YAAM,KAAK,UAAU,KAAK;AAC1B,cAAQ,OAAO,OAAO,KAAK,OAAO,KAAK,EAAE;AACzC,cAAQ,OAAO,OAAO,KAAK,OAAO,KAAK,EAAE;AAAA,IAC3C;AACA,SAAK,WAAW,OAAO;AACvB,WAAO,UAAU,OAAO,MAAM;AAAA,EAChC;AAAA,EACA,aAAa,SAAS,GAAG;AACvB,QAAI,MAAM,UAAc,EAAC,WAAW,OAAO,QAAQ,WAAW;AAAa,UAAI,SAAS,UAAU;AAClG,QAAI,KAAK,SAAY,IAAI,CAAC;AAC1B,UAAM,SAAS,WAAW,OAAO,UAAU,IAAI,SAAO;AACtD,UAAM,EAAC,WAAU;AACjB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAI,GAAG,KAAK,GAAG;AAChD,YAAM,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI;AACpC,cAAQ,OAAO,IAAI,GAAG,CAAC;AACvB,cAAQ,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,IAC7B;AACA,WAAO,UAAU,OAAO,MAAM;AAAA,EAChC;AAAA,EACA,WAAW,SAAS;AAClB,UAAM,SAAS,WAAW,OAAO,UAAU,IAAI,SAAO;AACtD,UAAM,EAAC,MAAM,WAAU;AACvB,UAAM,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK;AAChC,YAAQ,OAAO,OAAO,IAAI,OAAO,IAAI,EAAE;AACvC,aAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,YAAM,KAAI,IAAI,KAAK;AACnB,cAAQ,OAAO,OAAO,KAAI,OAAO,KAAI,EAAE;AAAA,IACzC;AACA,YAAQ,UAAU;AAClB,WAAO,UAAU,OAAO,MAAM;AAAA,EAChC;AAAA,EACA,cAAc;AACZ,UAAM,UAAU,IAAI;AACpB,SAAK,WAAW,OAAO;AACvB,WAAO,QAAQ,MAAM;AAAA,EACvB;AAAA,EACA,eAAe,GAAG,SAAS;AACzB,UAAM,SAAS,WAAW,OAAO,UAAU,IAAI,SAAO;AACtD,UAAM,EAAC,QAAQ,cAAa;AAC5B,UAAM,KAAK,UAAU,KAAK,KAAK;AAC/B,UAAM,KAAK,UAAU,IAAI,KAAK;AAC9B,UAAM,KAAK,UAAU,IAAI,KAAK;AAC9B,YAAQ,OAAO,OAAO,KAAK,OAAO,KAAK,EAAE;AACzC,YAAQ,OAAO,OAAO,KAAK,OAAO,KAAK,EAAE;AACzC,YAAQ,OAAO,OAAO,KAAK,OAAO,KAAK,EAAE;AACzC,YAAQ,UAAU;AAClB,WAAO,UAAU,OAAO,MAAM;AAAA,EAChC;AAAA,EACA,CAAC,mBAAmB;AAClB,UAAM,EAAC,cAAa;AACpB,aAAS,IAAI,GAAG,IAAI,UAAU,SAAS,GAAG,IAAI,GAAG,EAAE,GAAG;AACpD,YAAM,KAAK,gBAAgB,CAAC;AAAA,IAC9B;AAAA,EACF;AAAA,EACA,gBAAgB,GAAG;AACjB,UAAM,UAAU,IAAI;AACpB,SAAK,eAAe,GAAG,OAAO;AAC9B,WAAO,QAAQ,MAAM;AAAA,EACvB;AACF;AAEA,mBAAmB,QAAQ,IAAI,IAAI,MAAM;AACvC,QAAM,IAAI,OAAO;AACjB,QAAM,QAAQ,IAAI,aAAa,IAAI,CAAC;AACpC,WAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAM,IAAI,OAAO;AACjB,UAAM,IAAI,KAAK,GAAG,KAAK,MAAM,GAAG,GAAG,MAAM;AACzC,UAAM,IAAI,IAAI,KAAK,GAAG,KAAK,MAAM,GAAG,GAAG,MAAM;AAAA,EAC/C;AACA,SAAO;AACT;AAEA,uBAAuB,QAAQ,IAAI,IAAI,MAAM;AAC3C,MAAI,IAAI;AACR,aAAW,KAAK,QAAQ;AACtB,UAAM,GAAG,KAAK,MAAM,GAAG,GAAG,MAAM;AAChC,UAAM,GAAG,KAAK,MAAM,GAAG,GAAG,MAAM;AAChC,MAAE;AAAA,EACJ;AACF;",
  "names": []
}
